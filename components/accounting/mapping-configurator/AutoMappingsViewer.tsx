"use client";

import { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { 
  ChevronRight, 
  FileText, 
  Package, 
  Briefcase, 
  CreditCard,
  BookOpen,
  Layers,
  GitBranch,
  Sparkles,
  CheckCircle2,
  AlertCircle,
  HelpCircle,
  TrendingUp,
  Settings,
  Info,
  AlertTriangle,
  Zap
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useHelpTranslations } from '@/hooks/useHelpTranslations';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { toast } from 'sonner';

interface AutoMappingsViewerProps {
  systemId: string;
  legalEntityId: string;
}

export default function AutoMappingsViewer({ systemId, legalEntityId }: AutoMappingsViewerProps) {
  const [mappings, setMappings] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const { translations: helpText, loading: helpLoading } = useHelpTranslations('contabilidad/mapeo_help');
  const queryClient = useQueryClient();

  // Mutation para ejecutar mapeo automático
  const autoMapMutation = useMutation({
    mutationFn: async () => {
      const response = await fetch('/api/accounting/auto-map-all', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ legalEntityId, systemId })
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Error al ejecutar mapeo automático');
      }
      
      return response.json();
    },
    onSuccess: (data) => {
      toast.success('Mapeo automático completado', {
        description: `Se crearon ${data.createdAccounts} subcuentas y ${data.createdMappings} mapeos`
      });
      // Recargar los datos
      fetchMappings();
      // Invalidar queries relacionadas
      queryClient.invalidateQueries({ queryKey: ['accounts'] });
      queryClient.invalidateQueries({ queryKey: ['mappings'] });
    },
    onError: (error: any) => {
      toast.error('Error al ejecutar mapeo automático', {
        description: error.message
      });
    }
  });

  useEffect(() => {
    fetchMappings();
  }, [systemId, legalEntityId]);

  const fetchMappings = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        legalEntityId,
        ...(systemId && { systemId })
      });
      
      const response = await fetch(`/api/accounting/auto-mappings?${params}`);
      const data = await response.json();
      setMappings(data);
    } catch (error) {
      console.error('Error fetching auto mappings:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading || helpLoading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
          <p className="text-sm text-muted-foreground">Cargando información del sistema...</p>
        </div>
      </div>
    );
  }

  if (!mappings) return null;

  // Calcular estadísticas reales
  const totalAutoAccounts = mappings.summary?.totalAutoAccounts || 0;
  const totalCategories = mappings.directMappings?.categories?.length || 0;
  const totalProducts = mappings.directMappings?.products?.length || 0;
  const totalServices = mappings.directMappings?.services?.length || 0;
  const totalPaymentMethods = mappings.directMappings?.paymentMethods?.length || 0;
  
  // Contar subcuentas por tipo
  const subcuentasPorCategoria = mappings.autoGeneratedAccounts?.categories?.accounts?.length || 0;
  const subcuentasPorProducto = mappings.autoGeneratedAccounts?.products?.accounts?.length || 0;
  const subcuentasPorServicio = mappings.autoGeneratedAccounts?.services?.accounts?.length || 0;
  
  // Calcular totales no mapeados (estimación basada en el sistema)
  const unmappedCategories = Math.max(0, 10 - totalCategories); // Estimación
  const unmappedProducts = Math.max(0, 20 - totalProducts); // Estimación
  const unmappedServices = Math.max(0, 15 - totalServices); // Estimación
  const unmappedPaymentMethods = Math.max(0, 5 - totalPaymentMethods); // Estimación
  
  const totalMapped = totalCategories + totalProducts + totalServices + totalPaymentMethods;
  const totalEstimated = totalMapped + unmappedCategories + unmappedProducts + unmappedServices + unmappedPaymentMethods;
  
  const mappingCoverage = totalEstimated > 0 ? Math.round((totalMapped / totalEstimated) * 100) : 0;

  // Obtener ejemplo real del sistema
  const getRealExample = () => {
    if (mappings.autoGeneratedAccounts && Object.keys(mappings.autoGeneratedAccounts).length > 0) {
      const firstGroup = Object.values(mappings.autoGeneratedAccounts)[0] as any;
      if (firstGroup.parent) {
        return {
          parent: firstGroup.parent,
          subaccounts: firstGroup.accounts?.slice(0, 2) || []
        };
      }
    }
    // Datos por defecto si no hay mapeos o si parent es null
    return {
      parent: { accountNumber: '70100', name: 'Ventas de Servicios' },
      subaccounts: []
    };
  };

  const realExample = getRealExample();

  return (
    <div className="space-y-8 max-w-7xl mx-auto">
      {/* Aviso de descargo de responsabilidad */}
      <Alert className="border-amber-200 bg-amber-50">
        <AlertTriangle className="h-4 w-4 text-amber-600" />
        <AlertTitle className="text-amber-800">Aviso Legal Importante</AlertTitle>
        <AlertDescription className="text-amber-700">
          Este no es un sistema de gestión contable completo. Es una estructura informativa de ayuda que NO sustituye 
          la supervisión de un profesional contable. Toda la información debe ser siempre verificada y supervisada por 
          personal contable especializado para la presentación legal y cumplimiento normativo.
        </AlertDescription>
      </Alert>

      {/* Header con título y descripción */}
      <div className="text-center space-y-2">
        <h2 className="text-3xl font-bold tracking-tight">{helpText.title}</h2>
        <p className="text-lg text-muted-foreground">{helpText.subtitle}</p>
      </div>

      {/* Introducción */}
      <Card className="border-primary/20">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BookOpen className="h-5 w-5" />
            {helpText.intro?.title}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground leading-relaxed">
            {helpText.intro?.description}
          </p>
        </CardContent>
      </Card>

      {/* Estadísticas actuales */}
      <div>
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <TrendingUp className="h-5 w-5" />
          {helpText.stats?.title}
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Card>
            <CardContent className="p-6">
              <div className="space-y-2">
                <p className="text-sm text-muted-foreground">{helpText.stats?.totalAccounts}</p>
                <p className="text-3xl font-bold">{totalAutoAccounts}</p>
                <Progress value={mappingCoverage} className="h-2" />
                <p className="text-xs text-muted-foreground">{mappingCoverage}% {helpText.stats?.mappingCoverage}</p>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-muted-foreground">{helpText.stats?.byCategory}</p>
                  <p className="text-2xl font-bold">{subcuentasPorCategoria}</p>
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">{helpText.stats?.byProduct}</p>
                  <p className="text-2xl font-bold">{subcuentasPorProducto}</p>
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4 mt-4">
                <div>
                  <p className="text-sm text-muted-foreground">{helpText.stats?.byService}</p>
                  <p className="text-2xl font-bold">{subcuentasPorServicio}</p>
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Métodos de Pago</p>
                  <p className="text-2xl font-bold">{totalPaymentMethods}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className={totalAutoAccounts > 0 ? "bg-primary/5" : "bg-amber-50 border-amber-200"}>
            <CardContent className="p-6">
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  {totalAutoAccounts > 0 ? (
                    <>
                      <CheckCircle2 className="h-5 w-5 text-green-600" />
                      <p className="text-sm font-medium">Sistema Activo</p>
                    </>
                  ) : (
                    <>
                      <AlertCircle className="h-5 w-5 text-amber-600" />
                      <p className="text-sm font-medium">Sistema Sin Configurar</p>
                    </>
                  )}
                </div>
                <p className="text-sm text-muted-foreground">
                  {totalAutoAccounts > 0 
                    ? "El mapeo automático está funcionando correctamente" 
                    : "Ejecuta el mapeo automático para comenzar"}
                </p>
                <Button 
                  size="sm" 
                  className="w-full mt-3"
                  onClick={() => {
                    if (totalAutoAccounts > 0) {
                      if (confirm('¿Estás seguro de que deseas remapear? Esto sobrescribirá los mapeos existentes.')) {
                        autoMapMutation.mutate();
                      }
                    } else {
                      autoMapMutation.mutate();
                    }
                  }}
                  disabled={autoMapMutation.isPending}
                >
                  {autoMapMutation.isPending ? (
                    <>Ejecutando...</>
                  ) : (
                    <>
                      <Zap className="h-4 w-4 mr-2" />
                      {totalAutoAccounts > 0 ? 'Remapear Todo' : 'Ejecutar Mapeo Automático'}
                    </>
                  )}
                </Button>
                {totalAutoAccounts > 0 && (
                  <div className="flex gap-2 mt-3">
                    <Badge variant="secondary">
                      {subcuentasPorCategoria} Subcuentas Categorías
                    </Badge>
                    <Badge variant="secondary">
                      {subcuentasPorProducto} Subcuentas Productos
                    </Badge>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Estructura jerárquica con datos reales */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Layers className="h-5 w-5" />
            {helpText.structure?.title}
          </CardTitle>
          <CardDescription>
            {helpText.structure?.description}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            <div className="relative">
              <div className="absolute left-8 top-14 bottom-0 w-0.5 bg-border"></div>
              
              {/* Nivel 1: Cuenta Padre */}
              <div className="relative flex items-start gap-4 pb-6">
                <div className="relative z-10 flex h-16 w-16 items-center justify-center rounded-full bg-primary/10 border-2 border-primary">
                  <span className="text-xl font-bold">1</span>
                </div>
                <div className="flex-1 pt-3">
                  <h4 className="font-semibold">{helpText.structure?.levels?.parent}</h4>
                  <p className="text-sm text-muted-foreground mt-1">
                    {helpText.structure?.levels?.parentDesc}
                  </p>
                  <div className="mt-2">
                    {realExample.parent ? (
                      <>
                        <Badge variant="outline" className="font-mono">{realExample.parent.accountNumber}</Badge>
                        <span className="ml-2 text-sm">{realExample.parent.name}</span>
                      </>
                    ) : (
                      <span className="text-sm text-muted-foreground italic">No disponible</span>
                    )}
                  </div>
                </div>
              </div>

              {/* Nivel 2: Subcuenta */}
              <div className="relative flex items-start gap-4 pb-6">
                <div className="relative z-10 flex h-16 w-16 items-center justify-center rounded-full bg-secondary/50 border-2 border-secondary">
                  <span className="text-xl font-bold">2</span>
                </div>
                <div className="flex-1 pt-3">
                  <h4 className="font-semibold">{helpText.structure?.levels?.sub}</h4>
                  <p className="text-sm text-muted-foreground mt-1">
                    {helpText.structure?.levels?.subDesc}
                  </p>
                  <div className="mt-2 space-y-1">
                    {realExample.subaccounts.length > 0 ? (
                      realExample.subaccounts.map((sub: any) => (
                        <div key={sub.id}>
                          <Badge variant="outline" className="font-mono">{sub.accountNumber}</Badge>
                          <span className="ml-2 text-sm">{sub.name}</span>
                        </div>
                      ))
                    ) : realExample.parent ? (
                      <>
                        <div>
                          <Badge variant="outline" className="font-mono">{realExample.parent.accountNumber}001</Badge>
                          <span className="ml-2 text-sm">Ejemplo - Subcuenta 1</span>
                        </div>
                        <div>
                          <Badge variant="outline" className="font-mono">{realExample.parent.accountNumber}002</Badge>
                          <span className="ml-2 text-sm">Ejemplo - Subcuenta 2</span>
                        </div>
                      </>
                    ) : (
                      <span className="text-sm text-muted-foreground italic">No hay subcuentas disponibles</span>
                    )}
                  </div>
                </div>
              </div>

              {/* Nivel 3: Mapeo */}
              <div className="relative flex items-start gap-4">
                <div className="relative z-10 flex h-16 w-16 items-center justify-center rounded-full bg-accent/50 border-2 border-accent">
                  <span className="text-xl font-bold">3</span>
                </div>
                <div className="flex-1 pt-3">
                  <h4 className="font-semibold">{helpText.structure?.levels?.mapping}</h4>
                  <p className="text-sm text-muted-foreground mt-1">
                    {helpText.structure?.levels?.mappingDesc}
                  </p>
                  <div className="mt-2 flex items-center gap-2">
                    {mappings.directMappings?.categories?.length > 0 && mappings.directMappings?.categories?.[0] ? (
                      <>
                        <Badge>Categoría: {mappings.directMappings.categories[0].categoryName}</Badge>
                        <ChevronRight className="h-4 w-4" />
                        <Badge variant="outline">{mappings.directMappings.categories[0].accountNumber}</Badge>
                      </>
                    ) : (
                      <>
                        <Badge>Categoría: Consultas Médicas</Badge>
                        <ChevronRight className="h-4 w-4" />
                        <Badge variant="outline">{realExample.parent.accountNumber}001</Badge>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Proceso de automatización */}
      <div>
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <Sparkles className="h-5 w-5" />
          {helpText.autoProcess?.title}
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {Object.entries(helpText.autoProcess?.steps || {}).map(([key, step]: [string, any]) => (
            <Card key={key} className="relative overflow-hidden">
              <div className="absolute top-0 right-0 p-4 text-6xl font-bold text-muted-foreground/10">
                {key}
              </div>
              <CardHeader className="pb-3">
                <CardTitle className="text-base">{step.title}</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground">{step.desc}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Beneficios */}
      <Card className="bg-gradient-to-br from-primary/5 to-primary/10">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle2 className="h-5 w-5" />
            {helpText.benefits?.title}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {Object.entries(helpText.benefits?.items || {}).map(([key, item]) => (
              <div key={key} className="flex items-start gap-3">
                <div className="mt-1 rounded-full bg-primary/20 p-1">
                  <CheckCircle2 className="h-4 w-4 text-primary" />
                </div>
                <p className="text-sm">{String(item)}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Personalización */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            {helpText.customization?.title}
          </CardTitle>
          <CardDescription>
            {helpText.customization?.description}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {Object.entries(helpText.customization?.options || {}).map(([key, option]) => (
              <div key={key} className="flex items-center gap-3">
                <Badge variant="outline" className="h-6 w-6 rounded-full p-0 flex items-center justify-center">
                  {key}
                </Badge>
                <p className="text-sm">{String(option)}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Ayuda adicional */}
      <Alert>
        <HelpCircle className="h-4 w-4" />
        <AlertDescription className="flex items-center justify-between">
          <span>{helpText.help?.needHelp}</span>
          <div className="flex gap-2">
            <Button variant="link" size="sm">
              {helpText.help?.contact}
            </Button>
            <Button variant="link" size="sm">
              {helpText.help?.manual}
            </Button>
          </div>
        </AlertDescription>
      </Alert>
    </div>
  );
}
