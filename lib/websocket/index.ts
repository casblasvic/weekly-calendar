/**
 * ========================================
 * WEBSOCKET SYSTEM - M√ìDULO PRINCIPAL
 * ========================================
 * 
 * üåê SISTEMA DE WEBSOCKETS ROBUSTO
 * Este m√≥dulo proporciona la infraestructura principal para manejar conexiones WebSocket
 * en toda la aplicaci√≥n. Incluye gesti√≥n de conexiones, reconexi√≥n autom√°tica, 
 * rate limiting, colas de mensajes y un sistema de eventos centralizado.
 * 
 * üìä TABLAS DE BASE DE DATOS UTILIZADAS:
 * - `WebSocketConnection`: Estado y configuraci√≥n de conexiones activas
 * - `WebSocketLog`: Registro completo de eventos, errores y mensajes
 * 
 * üîß IMPORTACI√ìN DE PRISMA:
 * IMPORTANTE: Siempre usar la l√≠nea exacta: import { prisma } from '@/lib/db';
 * NO usar otras variaciones como '@/lib/prisma' o '@/prisma/client'
 * 
 * üèóÔ∏è ARQUITECTURA DEL SISTEMA:
 * 
 * ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
 * ‚îÇ                    WEBSOCKET SYSTEM                         ‚îÇ
 * ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
 * ‚îÇ  RobustWebSocketManager (connection-manager.ts)            ‚îÇ
 * ‚îÇ  ‚îú‚îÄ‚îÄ Gesti√≥n de conexiones m√∫ltiples                       ‚îÇ
 * ‚îÇ  ‚îú‚îÄ‚îÄ Reconexi√≥n autom√°tica con backoff                     ‚îÇ
 * ‚îÇ  ‚îú‚îÄ‚îÄ Health checks y m√©tricas                              ‚îÇ
 * ‚îÇ  ‚îî‚îÄ‚îÄ Integraci√≥n con base de datos                         ‚îÇ
 * ‚îÇ                                                             ‚îÇ
 * ‚îÇ  WebSocketEventBus (event-bus.ts)                          ‚îÇ
 * ‚îÇ  ‚îú‚îÄ‚îÄ Sistema de eventos centralizado                       ‚îÇ
 * ‚îÇ  ‚îú‚îÄ‚îÄ Pub/Sub para comunicaci√≥n entre componentes          ‚îÇ
 * ‚îÇ  ‚îî‚îÄ‚îÄ Type-safe event handling                              ‚îÇ
 * ‚îÇ                                                             ‚îÇ
 * ‚îÇ  MessageQueue (message-queue.ts)                           ‚îÇ
 * ‚îÇ  ‚îú‚îÄ‚îÄ Cola de mensajes con prioridades                      ‚îÇ
 * ‚îÇ  ‚îú‚îÄ‚îÄ Reintento autom√°tico de env√≠os fallidos              ‚îÇ
 * ‚îÇ  ‚îî‚îÄ‚îÄ Rate limiting integrado                               ‚îÇ
 * ‚îÇ                                                             ‚îÇ
 * ‚îÇ  ConnectionService (connection-service.ts)                 ‚îÇ
 * ‚îÇ  ‚îú‚îÄ‚îÄ CRUD de conexiones en base de datos                   ‚îÇ
 * ‚îÇ  ‚îú‚îÄ‚îÄ Estad√≠sticas y m√©tricas                               ‚îÇ
 * ‚îÇ  ‚îî‚îÄ‚îÄ Logging de eventos                                    ‚îÇ
 * ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
 * 
 * üîå TIPOS DE CONEXIONES SOPORTADAS:
 * - SHELLY: Conexiones a dispositivos Shelly via Cloud API
 * - SOCKET_IO: Conexiones Socket.io para tiempo real
 * - CUSTOM: Conexiones WebSocket personalizadas
 * - TEST: Conexiones de prueba para desarrollo
 * 
 * üì° FLUJO DE UNA CONEXI√ìN T√çPICA:
 * 1. Crear registro en tabla `WebSocketConnection`
 * 2. RobustWebSocketManager establece conexi√≥n f√≠sica
 * 3. EventBus notifica eventos de conexi√≥n/desconexi√≥n
 * 4. MessageQueue gestiona env√≠o de mensajes
 * 5. ConnectionService registra todos los eventos en logs
 * 6. Health checks monitorizan estado continuamente
 * 
 * üéØ CASOS DE USO PRINCIPALES:
 * - **Dispositivos IoT**: Control en tiempo real (Shelly, sensores)
 * - **Notificaciones**: Push notifications a usuarios
 * - **Colaboraci√≥n**: Actualizaciones en tiempo real entre usuarios
 * - **Monitoreo**: M√©tricas y alertas en tiempo real
 * 
 * üö® CONSIDERACIONES CR√çTICAS:
 * - **Reconexi√≥n**: Sistema autom√°tico con exponential backoff
 * - **Rate Limiting**: Prevenci√≥n de spam y sobrecarga
 * - **Persistencia**: Todos los eventos se guardan en BD
 * - **Escalabilidad**: Dise√±ado para m√∫ltiples conexiones simult√°neas
 * - **Seguridad**: Validaci√≥n de tokens y permisos por systemId
 * 
 * üìà M√âTRICAS Y MONITOREO:
 * - Conexiones activas/inactivas
 * - Mensajes enviados/recibidos por segundo
 * - Tasa de errores y reconexiones
 * - Latencia promedio de mensajes
 * - Uso de memoria y CPU
 * 
 * üîß CONFIGURACI√ìN:
 * - maxReconnectAttempts: M√°ximo n√∫mero de reintentos
 * - reconnectInterval: Tiempo entre reintentos (ms)
 * - heartbeatInterval: Frecuencia de ping/pong (ms)
 * - messageTimeout: Timeout para respuestas (ms)
 * - rateLimitWindow: Ventana de rate limiting (ms)
 * 
 * üí° EJEMPLOS DE USO:
 * 
 * // Crear conexi√≥n b√°sica
 * const connection = await webSocketManager.connect({
 *   url: 'wss://api.example.com/ws',
 *   type: 'CUSTOM',
 *   tags: ['monitoring', 'alerts']
 * });
 * 
 * // Enviar mensaje
 * await webSocketManager.send(connection.id, {
 *   type: 'command',
 *   data: { action: 'status' }
 * });
 * 
 * // Escuchar eventos
 * webSocketEventBus.on('message:received', (data) => {
 *   console.log('Mensaje recibido:', data);
 * });
 * 
 * // Obtener m√©tricas
 * const metrics = webSocketManager.getMetrics();
 * console.log(`Conexiones activas: ${metrics.activeConnections}`);
 */

// Tipos e interfaces
export * from './types';

// Componentes principales
export { RobustWebSocketManager } from './connection-manager';
export { webSocketConnectionService } from './connection-service';
export { PriorityMessageQueue } from './message-queue';
export { TokenBucketRateLimiter } from './rate-limiter';
export { WebSocketEventBus } from './event-bus';
export { webSocketInitializer } from './initializer';

// Instancia singleton del manager principal
import { RobustWebSocketManager } from './connection-manager';

/**
 * üéØ INSTANCIA SINGLETON GLOBAL
 * 
 * Esta es la instancia principal del WebSocket Manager que debe usarse
 * en toda la aplicaci√≥n para mantener consistencia y evitar m√∫ltiples
 * managers compitiendo por las mismas conexiones.
 * 
 * IMPORTANTE: Esta instancia se inicializa autom√°ticamente y gestiona
 * todas las conexiones WebSocket del sistema.
 */
export const webSocketManager = new RobustWebSocketManager();

// Configuraciones predefinidas
export const DEFAULT_CONFIG = {
  reconnectInterval: 5000,
  maxReconnectAttempts: 5,
  pingInterval: 30000,
  pongTimeout: 10000,
  messageQueueSize: 10000,
  rateLimitPerMinute: 60
};

export const SHELLY_CONFIG = {
  reconnectInterval: 3000,
  maxReconnectAttempts: 10,
  pingInterval: 25000,
  pongTimeout: 8000,
  messageQueueSize: 5000,
  rateLimitPerMinute: 120
}; 