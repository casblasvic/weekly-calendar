/**
 * üïê GESTOR CENTRALIZADO DE CRONS - SISTEMA ORGANIZACIONAL
 * =========================================================
 * 
 * Sistema unificado para gestionar todos los trabajos programados (crons) de la aplicaci√≥n:
 * - Registro centralizado de todos los crons
 * - Configuraci√≥n unificada de horarios
 * - Monitoreo y logging de ejecuciones
 * - Gesti√≥n de errores y reintentos
 * - Documentaci√≥n autom√°tica de trabajos
 * 
 * üéØ OBJETIVOS:
 * - Tener TODOS los crons en un solo lugar
 * - Evitar duplicaci√≥n de trabajos
 * - Facilitar mantenimiento y debugging
 * - Permitir activaci√≥n/desactivaci√≥n f√°cil
 * - Generar reportes de ejecuci√≥n
 * 
 * üìã CRONS REGISTRADOS:
 * 1. confidence-full-recalculation: Rec√°lculo completo de certeza (24h)
 * 2. [FUTURO] energy-cleanup: Limpieza de datos energ√©ticos antiguos
 * 3. [FUTURO] backup-metrics: Backup de m√©tricas cr√≠ticas
 * 4. [FUTURO] system-health-check: Verificaci√≥n de salud del sistema
 * 
 * Variables cr√≠ticas:
 * - cronId: Identificador √∫nico del cron
 * - schedule: Expresi√≥n cron (formato est√°ndar)
 * - enabled: Estado activo/inactivo
 * - lastExecution: √öltima ejecuci√≥n exitosa
 * - errorCount: Contador de errores consecutivos
 * - maxRetries: M√°ximo n√∫mero de reintentos
 * 
 * @see docs/CRON_MANAGEMENT_STRATEGY.md
 */

import { prisma } from '@/lib/db'
import { incrementalConfidenceCalculator } from '@/lib/energy/incremental-confidence-calculator'
import { calculateSystemConfidence } from '@/lib/energy/confidence-calculator'

// ============================================================================
// üéØ INTERFACES PARA GESTI√ìN DE CRONS
// ============================================================================

/**
 * üìã Configuraci√≥n de un trabajo cron
 */
export interface CronJobConfig {
  id: string
  name: string
  description: string
  schedule: string // Expresi√≥n cron: "0 2 * * *" = 2:00 AM diario
  enabled: boolean
  category: 'confidence' | 'energy' | 'backup' | 'maintenance' | 'cleanup'
  priority: 'critical' | 'high' | 'medium' | 'low'
  maxRetries: number
  timeoutMinutes: number
  handler: () => Promise<void>
  
  // Metadatos
  createdAt: Date
  lastModified: Date
  author: string
  documentation: string
}

/**
 * üìä Estado de ejecuci√≥n de un cron
 */
export interface CronExecutionStatus {
  cronId: string
  lastExecution?: Date
  lastSuccess?: Date
  lastError?: Date
  errorCount: number
  totalExecutions: number
  avgExecutionTime: number
  isRunning: boolean
  nextExecution?: Date
}

/**
 * üìà Reporte de ejecuci√≥n
 */
export interface CronExecutionReport {
  cronId: string
  startTime: Date
  endTime?: Date
  duration?: number
  status: 'running' | 'success' | 'error' | 'timeout'
  errorMessage?: string
  metadata?: Record<string, any>
}

// ============================================================================
// üéØ GESTOR CENTRALIZADO DE CRONS
// ============================================================================

/**
 * üïê CLASE PRINCIPAL: Gestor Centralizado de Crons
 * 
 * Administra todos los trabajos programados de la aplicaci√≥n:
 * - Registro y configuraci√≥n de crons
 * - Ejecuci√≥n controlada con timeouts
 * - Monitoreo y logging autom√°tico
 * - Gesti√≥n de errores y reintentos
 * - Reportes de estado y rendimiento
 */
export class CronManager {
  
  private jobs = new Map<string, CronJobConfig>()
  private executionStatus = new Map<string, CronExecutionStatus>()
  private runningJobs = new Set<string>()
  
  constructor() {
    this.initializeDefaultJobs()
  }
  
  /**
   * üéØ REGISTRAR NUEVO TRABAJO CRON
   * 
   * @param config - Configuraci√≥n del trabajo cron
   */
  registerJob(config: CronJobConfig): void {
    if (this.jobs.has(config.id)) {
      console.warn(`‚ö†Ô∏è Cron job '${config.id}' ya existe. Sobrescribiendo...`)
    }
    
    this.jobs.set(config.id, {
      ...config,
      createdAt: config.createdAt || new Date(),
      lastModified: new Date()
    })
    
    // Inicializar estado de ejecuci√≥n
    if (!this.executionStatus.has(config.id)) {
      this.executionStatus.set(config.id, {
        cronId: config.id,
        errorCount: 0,
        totalExecutions: 0,
        avgExecutionTime: 0,
        isRunning: false
      })
    }
    
    console.log(`‚úÖ Cron job '${config.id}' registrado exitosamente`)
  }
  
  /**
   * üöÄ EJECUTAR TRABAJO CRON
   * 
   * @param cronId - ID del trabajo a ejecutar
   * @param force - Forzar ejecuci√≥n aunque est√© deshabilitado
   */
  async executeJob(cronId: string, force: boolean = false): Promise<CronExecutionReport> {
    const job = this.jobs.get(cronId)
    const status = this.executionStatus.get(cronId)
    
    if (!job) {
      throw new Error(`Cron job '${cronId}' no encontrado`)
    }
    
    if (!job.enabled && !force) {
      throw new Error(`Cron job '${cronId}' est√° deshabilitado`)
    }
    
    if (status?.isRunning) {
      throw new Error(`Cron job '${cronId}' ya est√° ejecut√°ndose`)
    }
    
    // Iniciar ejecuci√≥n
    const report: CronExecutionReport = {
      cronId,
      startTime: new Date(),
      status: 'running'
    }
    
    this.runningJobs.add(cronId)
    if (status) {
      status.isRunning = true
      status.totalExecutions += 1
    }
    
    try {
      console.log(`üöÄ Iniciando cron job '${cronId}' - ${job.name}`)
      
      // Ejecutar con timeout
      const timeoutPromise = new Promise<never>((_, reject) => {
        setTimeout(() => reject(new Error('Timeout')), job.timeoutMinutes * 60 * 1000)
      })
      
      await Promise.race([
        job.handler(),
        timeoutPromise
      ])
      
      // Ejecuci√≥n exitosa
      report.endTime = new Date()
      report.duration = report.endTime.getTime() - report.startTime.getTime()
      report.status = 'success'
      
      if (status) {
        status.lastSuccess = report.endTime
        status.lastExecution = report.endTime
        status.errorCount = 0 // Reset contador de errores
        status.avgExecutionTime = this.calculateAvgExecutionTime(status, report.duration)
      }
      
      console.log(`‚úÖ Cron job '${cronId}' completado exitosamente en ${report.duration}ms`)
      
    } catch (error) {
      // Error en ejecuci√≥n
      report.endTime = new Date()
      report.duration = report.endTime.getTime() - report.startTime.getTime()
      report.status = error instanceof Error && error.message === 'Timeout' ? 'timeout' : 'error'
      report.errorMessage = error instanceof Error ? error.message : 'Error desconocido'
      
      if (status) {
        status.lastError = report.endTime
        status.lastExecution = report.endTime
        status.errorCount += 1
      }
      
      console.error(`‚ùå Error en cron job '${cronId}':`, error)
      
      // Intentar reintento si est√° configurado
      if (status && status.errorCount < job.maxRetries) {
        console.log(`üîÑ Reintentando cron job '${cronId}' (intento ${status.errorCount + 1}/${job.maxRetries})`)
        // Programar reintento en 5 minutos
        setTimeout(() => {
          this.executeJob(cronId, true).catch(console.error)
        }, 5 * 60 * 1000)
      }
      
    } finally {
      // Limpiar estado
      this.runningJobs.delete(cronId)
      if (status) {
        status.isRunning = false
      }
    }
    
    // Guardar reporte en base de datos
    await this.saveExecutionReport(report)
    
    return report
  }
  
  /**
   * üìä OBTENER ESTADO DE TODOS LOS CRONS
   */
  getAllJobsStatus(): Array<CronJobConfig & CronExecutionStatus> {
    const results: Array<CronJobConfig & CronExecutionStatus> = []
    
    for (const [cronId, job] of this.jobs) {
      const status = this.executionStatus.get(cronId)
      results.push({
        ...job,
        ...(status || {
          cronId,
          errorCount: 0,
          totalExecutions: 0,
          avgExecutionTime: 0,
          isRunning: false
        })
      })
    }
    
    return results.sort((a, b) => {
      // Ordenar por prioridad y luego por categor√≠a
      const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 }
      const priorityDiff = priorityOrder[a.priority] - priorityOrder[b.priority]
      if (priorityDiff !== 0) return priorityDiff
      
      return a.category.localeCompare(b.category)
    })
  }
  
  /**
   * üîß HABILITAR/DESHABILITAR TRABAJO CRON
   */
  setJobEnabled(cronId: string, enabled: boolean): void {
    const job = this.jobs.get(cronId)
    if (!job) {
      throw new Error(`Cron job '${cronId}' no encontrado`)
    }
    
    job.enabled = enabled
    job.lastModified = new Date()
    
    console.log(`${enabled ? '‚úÖ' : '‚ùå'} Cron job '${cronId}' ${enabled ? 'habilitado' : 'deshabilitado'}`)
  }
  
  /**
   * üìã GENERAR REPORTE DE CRONS
   */
  generateReport(): {
    summary: {
      totalJobs: number
      enabledJobs: number
      runningJobs: number
      errorJobs: number
    }
    jobs: Array<CronJobConfig & CronExecutionStatus>
  } {
    const jobs = this.getAllJobsStatus()
    
    return {
      summary: {
        totalJobs: jobs.length,
        enabledJobs: jobs.filter(j => j.enabled).length,
        runningJobs: jobs.filter(j => j.isRunning).length,
        errorJobs: jobs.filter(j => j.errorCount > 0).length
      },
      jobs
    }
  }
  
  // ============================================================================
  // üîß M√âTODOS AUXILIARES PRIVADOS
  // ============================================================================
  
  /**
   * üÜï INICIALIZAR TRABAJOS CRON POR DEFECTO
   */
  private initializeDefaultJobs(): void {
    
    // üéØ CRON #1: REC√ÅLCULO COMPLETO DE CERTEZA (24 HORAS)
    this.registerJob({
      id: 'confidence-full-recalculation',
      name: 'Rec√°lculo Completo de Certeza',
      description: 'Recalcula completamente las m√©tricas de certeza del sistema para mantener precisi√≥n',
      schedule: '0 2 * * *', // 2:00 AM todos los d√≠as
      enabled: true,
      category: 'confidence',
      priority: 'high',
      maxRetries: 3,
      timeoutMinutes: 30,
      handler: this.handleConfidenceRecalculation.bind(this),
      createdAt: new Date(),
      lastModified: new Date(),
      author: 'Sistema H√≠brido Incremental',
      documentation: `
        üéØ REC√ÅLCULO COMPLETO DE CERTEZA - CRON DIARIO
        
        Este cron es CR√çTICO para el sistema h√≠brido incremental:
        - Se ejecuta cada 24 horas a las 2:00 AM
        - Recalcula completamente las m√©tricas de certeza
        - Corrige posibles derivas incrementales
        - Actualiza m√©tricas de todos los sistemas
        
        ‚ö†Ô∏è IMPORTANTE:
        - NO modificar sin revisar sistema incremental
        - Coordinar con actualizaciones de algoritmo Welford
        - Monitorear rendimiento en sistemas grandes
        
        üìä M√âTRICAS ACTUALIZADAS:
        - Certeza global del sistema
        - M√©tricas de calidad y estabilidad
        - Contadores de perfiles y muestras
        - Historial de tendencias
        
        üîÑ PROCESO:
        1. Obtener todos los sistemas activos
        2. Recalcular certeza completa para cada sistema
        3. Comparar con m√©tricas incrementales
        4. Actualizar tabla system_confidence_metrics
        5. Marcar como rec√°lculo completo
        
        ‚è±Ô∏è TIEMPO ESTIMADO: 5-15 minutos seg√∫n volumen de datos
      `
    })
    
    // üéØ CRON #2: LIMPIEZA DE DATOS ENERG√âTICOS (SEMANAL)
    this.registerJob({
      id: 'energy-data-cleanup',
      name: 'Limpieza de Datos Energ√©ticos',
      description: 'Limpia datos energ√©ticos antiguos para optimizar rendimiento',
      schedule: '0 3 * * 0', // 3:00 AM todos los domingos
      enabled: false, // Deshabilitado por defecto hasta implementar
      category: 'cleanup',
      priority: 'medium',
      maxRetries: 2,
      timeoutMinutes: 60,
      handler: this.handleEnergyDataCleanup.bind(this),
      createdAt: new Date(),
      lastModified: new Date(),
      author: 'Sistema de Limpieza',
      documentation: `
        üßπ LIMPIEZA DE DATOS ENERG√âTICOS - CRON SEMANAL
        
        [PENDIENTE DE IMPLEMENTACI√ìN]
        
        Este cron optimizar√° el rendimiento:
        - Elimina muestras de energ√≠a > 90 d√≠as
        - Consolida datos hist√≥ricos
        - Optimiza √≠ndices de base de datos
        - Genera reportes de limpieza
      `
    })
    
    // üéØ CRON #3: BACKUP DE M√âTRICAS CR√çTICAS (DIARIO)
    this.registerJob({
      id: 'critical-metrics-backup',
      name: 'Backup de M√©tricas Cr√≠ticas',
      description: 'Respalda m√©tricas cr√≠ticas del sistema para recuperaci√≥n',
      schedule: '0 4 * * *', // 4:00 AM todos los d√≠as
      enabled: false, // Deshabilitado por defecto hasta implementar
      category: 'backup',
      priority: 'high',
      maxRetries: 3,
      timeoutMinutes: 20,
      handler: this.handleCriticalMetricsBackup.bind(this),
      createdAt: new Date(),
      lastModified: new Date(),
      author: 'Sistema de Backup',
      documentation: `
        üíæ BACKUP DE M√âTRICAS CR√çTICAS - CRON DIARIO
        
        [PENDIENTE DE IMPLEMENTACI√ìN]
        
        Este cron protege datos cr√≠ticos:
        - Backup de system_confidence_metrics
        - Backup de perfiles energ√©ticos
        - Backup de configuraciones cr√≠ticas
        - Verificaci√≥n de integridad de backups
      `
    })
    
    console.log(`üéØ Cron Manager inicializado con ${this.jobs.size} trabajos`)
  }
  
  /**
   * üéØ HANDLER: Rec√°lculo Completo de Certeza
   * 
   * ‚ö†Ô∏è CRON CR√çTICO - EJECUTA CADA 24 HORAS
   * Este es el cron m√°s importante del sistema h√≠brido incremental
   */
  private async handleConfidenceRecalculation(): Promise<void> {
    console.log('üéØ Iniciando rec√°lculo completo de certeza...')
    
    try {
      // 1. Obtener todos los sistemas activos
      const systems = await prisma.systemConfidenceMetrics.findMany({
        select: { systemId: true },
        distinct: ['systemId']
      })
      
      console.log(`üìä Encontrados ${systems.length} sistemas para recalcular`)
      
      let processedSystems = 0
      let errors = 0
      
      // 2. Procesar cada sistema
      for (const system of systems) {
        try {
          console.log(`üîÑ Recalculando sistema: ${system.systemId}`)
          
          // Rec√°lculo completo usando sistema original
          const fullConfidence = await calculateSystemConfidence(system.systemId)
          
          // Obtener m√©tricas incrementales actuales para el historial
          const currentMetrics = await incrementalConfidenceCalculator.getCurrentMetrics(system.systemId)
          
          // Actualizar m√©tricas con rec√°lculo completo
          await prisma.systemConfidenceMetrics.update({
            where: { systemId: system.systemId },
            data: {
              // Actualizar con datos del rec√°lculo completo
              confidenceMean: fullConfidence.globalConfidence,
              lastCalculation: new Date(),
              recalculationCount: { increment: 1 },
              calculationMethod: 'full',
              
              // Mantener datos incrementales existentes
              lastUpdated: new Date(),
              
              // Actualizar historial con nuevo valor
              confidenceHistory: JSON.stringify([
                ...currentMetrics.confidenceHistory,
                fullConfidence.globalConfidence
              ].slice(-10))
            }
          })
          
          processedSystems++
          
        } catch (error) {
          console.error(`‚ùå Error recalculando sistema ${system.systemId}:`, error)
          errors++
        }
      }
      
      console.log(`‚úÖ Rec√°lculo completo finalizado: ${processedSystems} sistemas procesados, ${errors} errores`)
      
    } catch (error) {
      console.error('‚ùå Error en rec√°lculo completo de certeza:', error)
      throw error
    }
  }
  
  /**
   * üßπ HANDLER: Limpieza de Datos Energ√©ticos (FUTURO)
   */
  private async handleEnergyDataCleanup(): Promise<void> {
    console.log('üßπ Iniciando limpieza de datos energ√©ticos...')
    
    // TODO: Implementar limpieza de datos energ√©ticos
    // - Eliminar muestras > 90 d√≠as
    // - Consolidar datos hist√≥ricos
    // - Optimizar √≠ndices
    
    throw new Error('Limpieza de datos energ√©ticos no implementada a√∫n')
  }
  
  /**
   * üíæ HANDLER: Backup de M√©tricas Cr√≠ticas (FUTURO)
   */
  private async handleCriticalMetricsBackup(): Promise<void> {
    console.log('üíæ Iniciando backup de m√©tricas cr√≠ticas...')
    
    // TODO: Implementar backup de m√©tricas cr√≠ticas
    // - Backup de system_confidence_metrics
    // - Backup de perfiles energ√©ticos
    // - Verificaci√≥n de integridad
    
    throw new Error('Backup de m√©tricas cr√≠ticas no implementado a√∫n')
  }
  
  /**
   * üìä CALCULAR TIEMPO PROMEDIO DE EJECUCI√ìN
   */
  private calculateAvgExecutionTime(status: CronExecutionStatus, newDuration: number): number {
    if (status.totalExecutions <= 1) return newDuration
    
    const totalTime = status.avgExecutionTime * (status.totalExecutions - 1) + newDuration
    return Math.round(totalTime / status.totalExecutions)
  }
  
  /**
   * üíæ GUARDAR REPORTE DE EJECUCI√ìN
   */
  private async saveExecutionReport(report: CronExecutionReport): Promise<void> {
    try {
      // TODO: Implementar tabla de reportes de ejecuci√≥n si es necesario
      // Por ahora solo loggeamos
      console.log(`üìä Reporte de ejecuci√≥n guardado para ${report.cronId}:`, {
        duration: report.duration,
        status: report.status,
        error: report.errorMessage
      })
    } catch (error) {
      console.error('Error guardando reporte de ejecuci√≥n:', error)
    }
  }
}

// ============================================================================
// üéØ INSTANCIA SINGLETON EXPORTADA
// ============================================================================

/**
 * üéØ INSTANCIA SINGLETON DEL GESTOR DE CRONS
 * Usar esta instancia en toda la aplicaci√≥n para gesti√≥n centralizada
 */
export const cronManager = new CronManager()

// ============================================================================
// üîß FUNCIONES AUXILIARES PARA INTEGRACI√ìN
// ============================================================================

/**
 * üöÄ EJECUTAR CRON POR ID (PARA APIS O TESTING)
 */
export async function executeCronJob(cronId: string, force: boolean = false): Promise<CronExecutionReport> {
  return cronManager.executeJob(cronId, force)
}

/**
 * üìä OBTENER ESTADO DE TODOS LOS CRONS
 */
export function getAllCronJobsStatus() {
  return cronManager.getAllJobsStatus()
}

/**
 * üîß HABILITAR/DESHABILITAR CRON
 */
export function setCronJobEnabled(cronId: string, enabled: boolean): void {
  cronManager.setJobEnabled(cronId, enabled)
}

/**
 * üìã GENERAR REPORTE COMPLETO DE CRONS
 */
export function generateCronReport() {
  return cronManager.generateReport()
} 