generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model System {
  id                           String                        @id @default(cuid())
  name                         String
  isActive                     Boolean                       @default(true)
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  users                        User[]
  clinics                      Clinic[]
  roles                        Role[]
  companies                    Company[]
  employmentContracts          EmploymentContract[]
  timeLogs                     TimeLog[]
  banks                        Bank[]
  bankAccounts                 BankAccount[]
  paymentMethodDefinitions     PaymentMethodDefinition[]
  posTerminals                 PosTerminal[]
  devices                      Device[]
  equipment                    Equipment[]
  appointments                 Appointment[]
  scheduleTemplates            ScheduleTemplate[]
  services                     Service[]
  products                     Product[]
  stockLedgers                 StockLedger[]
  vatTypes                     VATType[]
  tariffs                      Tariff[]
  tickets                      Ticket[]                      @relation("SystemTickets")
  invoices                     Invoice[]                     @relation("SystemInvoices")
  payments                     Payment[]
  cashSessions                 CashSession[]
  bonoDefinitions              BonoDefinition[]
  bonoInstances                BonoInstance[]
  packageDefinitions           PackageDefinition[]
  packageInstances             PackageInstance[]
  promotions                   Promotion[]
  promotionCompatibilities     PromotionCompatibility[]
  skills                       Skill[]
  loyaltyLedgers               LoyaltyLedger[]
  debtLedgers                  DebtLedger[]
  entityRelations              EntityRelation[]
  entityImages                 EntityImage[]
  entityDocuments              EntityDocument[]
  categories                   Category[]
  cabins                       Cabin[]
  legalEntities                LegalEntity[]
  fiscalYears                  FiscalYear[]
  chartOfAccountEntries        ChartOfAccountEntry[]
  journalEntries               JournalEntry[]
  serviceAccountMappings       ServiceAccountMapping[]
  productAccountMappings       ProductAccountMapping[]
  categoryAccountMappings      CategoryAccountMapping[]
  paymentMethodAccountMappings PaymentMethodAccountMapping[]
  vatTypeAccountMappings       VATTypeAccountMapping[]
  expenseTypeAccountMappings   ExpenseTypeAccountMapping[]
  cashSessionAccountMappings   CashSessionAccountMapping[]
  discountTypeAccountMappings  DiscountTypeAccountMapping[]
  expenseTypes                 ExpenseType[]
  changeLogs                   EntityChangeLog[]             @relation("SystemLogs")
  debtAdjustments              DebtAdjustment[]              @relation("SystemDebtAdjustments")
  chartOfAccountTemplates      ChartOfAccountTemplate[]
  clinicPaymentSettings        ClinicPaymentSetting[]
  documentSeries               DocumentSeries[]
  accountMappingTemplates      AccountMappingTemplate[]
  analyticalDimensions         AnalyticalDimension[]
  entitySegmentConfigs         EntitySegmentConfig[]
  expenses                     Expense[]
  promotionAccountMappings     PromotionAccountMapping[]
  persons                      Person[]
  personFunctionalRoles        PersonFunctionalRole[]
  opportunities                Opportunity[]
  tags                         Tag[]
  appointmentDeviceUsage       AppointmentDeviceUsage[]
  webhooks                     Webhook[]
  webhookLogs                  WebhookLog[]
  integrations                 SystemIntegration[]
  smartDevices                 SmartPlugDevice[]
  shellyCredentials            ShellyCredential[]
  equipmentSpareParts          EquipmentSparePart[]
  sparePartInstallations       SparePartInstallation[]
  equipmentUsageLogs           EquipmentUsageLog[]
  equipmentAssignments         EquipmentClinicAssignment[]
  webSocketConnections         WebSocketConnection[]
  webSocketLogs                WebSocketLog[]

  @@map("systems")
}

model User {
  id                             String                          @id @default(cuid())
  email                          String                          @unique
  firstName                      String
  lastName                       String?
  passwordHash                   String
  profileImageUrl                String?
  isActive                       Boolean                         @default(true)
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime                        @updatedAt
  systemId                       String
  phone                          String?
  countryIsoCode                 String?
  languageIsoCode                String?
  phone1CountryIsoCode           String?
  phone2                         String?
  phone2CountryIsoCode           String?
  login                          String?                         @unique
  country                        CountryInfo?                    @relation(fields: [countryIsoCode], references: [isoCode], onDelete: SetNull)
  system                         System                          @relation(fields: [systemId], references: [id], onDelete: Cascade)
  roles                          UserRole[]
  timeLogs                       TimeLog[]
  contracts                      EmploymentContract[]
  appointmentsAsProf             Appointment[]                   @relation("ProfessionalUserAppointments")
  ticketsAsCashier               Ticket[]                        @relation("CashierUserTickets")
  paymentsRegistered             Payment[]
  cashSessionsOpened             CashSession[]                   @relation("UserCashSessions")
  loyaltyAdjustments             LoyaltyLedger[]                 @relation("UserLogs")
  stockAdjustments               StockLedger[]
  skills                         UserSkill[]
  imagesUploaded                 EntityImage[]                   @relation("UploadedImages")
  documentsUploaded              EntityDocument[]                @relation("UploadedDocuments")
  clinicAssignments              UserClinicAssignment[]
  customSchedules                UserClinicSchedule[]
  customScheduleExceptions       UserClinicScheduleException[]
  ticketsAsSeller                Ticket[]                        @relation("SellerUserTickets")
  verifiedPayments               PaymentVerification[]           @relation("VerifiedBy")
  debtAdjustmentsMade            DebtAdjustment[]                @relation("UserDebtAdjustments")
  changeLogs                     EntityChangeLog[]               @relation("UserLogs")
  expensesCreatedBy              Expense[]                       @relation("ExpenseCreatedBy")
  userExpenses                   Expense[]                       @relation("UserExpenses")
  chartOfAccountTemplateVersions ChartOfAccountTemplateVersion[]
  journalEntries                 JournalEntry[]
  personLeadData                 PersonLeadData[]
  validatedAppointmentServices   AppointmentService[]            @relation("ValidatedAppointmentServices")
  appointmentExtensions          AppointmentExtension[]
  servicesStarted                AppointmentService[]            @relation("ServiceStartedBy")
  deviceUsageStarted             AppointmentDeviceUsage[]        @relation("DeviceUsageStartedBy")
  webhooksCreated                Webhook[]
  sparePartsInstalled            SparePartInstallation[]         @relation("SparePartInstalledBy")
  sparePartsRemoved              SparePartInstallation[]         @relation("SparePartRemovedBy")

  @@index([systemId])
  @@index([countryIsoCode])
  @@index([languageIsoCode])
  @@index([phone1CountryIsoCode])
  @@index([phone2CountryIsoCode])
  @@index([login])
  @@map("users")
}

model CountryInfo {
  isoCode            String        @id @unique
  name               String
  timezone           String
  phoneCode          String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  languageCode       String?
  languageName       String?
  currencyCode       String
  currencyName       String
  currencySymbol     String
  users              User[]
  clinics            Clinic[]
  banks              Bank[]
  companies          Company[]
  legalEntities      LegalEntity[] @relation("LegalEntityJurisdictionCountry")
  legalEntitiesPhone LegalEntity[] @relation("LegalEntityPhoneCountry")

  @@index([currencyCode])
  @@map("country_info")
}

model LegalEntity {
  id                           String                        @id @default(cuid())
  name                         String
  fullAddress                  String?
  countryIsoCode               String
  taxIdentifierFields          Json?
  notes                        String?
  systemId                     String
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  email                        String?
  phone                        String?
  phoneCountryIsoCode          String?
  country                      CountryInfo                   @relation("LegalEntityJurisdictionCountry", fields: [countryIsoCode], references: [isoCode])
  phoneCountry                 CountryInfo?                  @relation("LegalEntityPhoneCountry", fields: [phoneCountryIsoCode], references: [isoCode], onDelete: SetNull)
  system                       System                        @relation(fields: [systemId], references: [id], onDelete: Cascade)
  clinics                      Clinic[]
  fiscalYears                  FiscalYear[]
  chartOfAccountEntries        ChartOfAccountEntry[]
  documentSeries               DocumentSeries[]
  journalEntries               JournalEntry[]
  serviceAccountMappings       ServiceAccountMapping[]
  productAccountMappings       ProductAccountMapping[]
  categoryAccountMappings      CategoryAccountMapping[]
  paymentMethodAccountMappings PaymentMethodAccountMapping[]
  vatTypes                     VATType[]
  vatTypeAccountMappings       VATTypeAccountMapping[]
  expenseTypeAccountMappings   ExpenseTypeAccountMapping[]
  cashSessionAccountMappings   CashSessionAccountMapping[]
  discountTypeAccountMappings  DiscountTypeAccountMapping[]
  debts                        DebtLedger[]
  Expense                      Expense[]
  promotionAccountMappings     PromotionAccountMapping[]

  @@index([systemId])
  @@index([countryIsoCode])
  @@map("legal_entities")
}

model Clinic {
  id                           String                        @id @default(cuid())
  name                         String
  address                      String?
  city                         String?
  postalCode                   String?
  province                     String?
  currency                     String
  phone                        String?
  email                        String?
  isActive                     Boolean                       @default(true)
  systemId                     String
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  affectsStats                 Boolean?                      @default(true)
  appearsInApp                 Boolean?                      @default(true)
  blockPersonalData            Boolean?                      @default(false)
  blockSignArea                Boolean?                      @default(false)
  businessName                 String?
  cif                          String?
  commercialName               String?
  delayedPayments              Boolean?                      @default(false)
  initialCash                  Float?
  ip                           String?
  notes                        String?
  phone2                       String?
  professionalSkills           Boolean?                      @default(false)
  scheduleControl              Boolean?                      @default(false)
  tariffId                     String
  ticketSize                   String?
  prefix                       String?
  linkedScheduleTemplateId     String?
  countryIsoCode               String?
  languageIsoCode              String?
  phone1CountryIsoCode         String?
  phone2CountryIsoCode         String?
  legalEntityId                String?                       @map("legal_entity_id")
  system                       System                        @relation(fields: [systemId], references: [id], onDelete: Cascade)
  country                      CountryInfo?                  @relation(fields: [countryIsoCode], references: [isoCode], onDelete: SetNull)
  legalEntity                  LegalEntity?                  @relation(fields: [legalEntityId], references: [id], onDelete: SetNull)
  linkedScheduleTemplate       ScheduleTemplate?             @relation("LinkedClinicTemplate", fields: [linkedScheduleTemplateId], references: [id], onDelete: SetNull)
  independentScheduleBlocks    ClinicScheduleBlock[]
  tariff                       Tariff?                       @relation(fields: [tariffId], references: [id], onDelete: Restrict)
  appointments                 Appointment[]
  tickets                      Ticket[]
  cashSessions                 CashSession[]
  userAssignments              UserClinicAssignment[]
  cabins                       Cabin[]
  userSchedules                UserClinicSchedule[]
  userScheduleExceptions       UserClinicScheduleException[]
  cabinScheduleOverrides       CabinScheduleOverride[]
  independentSchedule          ClinicSchedule?
  applicablePromotions         PromotionClinicScope[]
  paymentSettings              ClinicPaymentSetting[]
  availableBanks               BankClinicScope[]
  availableBankAccounts        BankAccountClinicScope[]
  availablePosTerminals        PosTerminalClinicScope[]
  payments                     Payment[]
  debtsOriginatedInClinic      DebtLedger[]
  scheduleExceptions           ClinicTemplateAssignment[]
  documentSeries               DocumentSeries[]
  CashSessionAccountMapping    CashSessionAccountMapping[]
  expenses                     Expense[]
  serviceAccountMappings       ServiceAccountMapping[]
  productAccountMappings       ProductAccountMapping[]
  paymentMethodAccountMappings PaymentMethodAccountMapping[]
  vatTypeAccountMappings       VATTypeAccountMapping[]
  ExpenseTypeAccountMapping    ExpenseTypeAccountMapping[]
  DiscountTypeAccountMapping   DiscountTypeAccountMapping[]
  promotionAccountMappings     PromotionAccountMapping[]
  opportunities                Opportunity[]
  personClientOrigin           PersonClientData[]            @relation("PersonClientOriginClinic")
  smartPlugDevices             SmartPlugDevice[]
  shellyCredentials            ShellyCredential[]
  equipmentAssignments         EquipmentClinicAssignment[]

  @@unique([name, systemId], name: "Clinic_name_systemId_key")
  @@index([systemId])
  @@index([tariffId])
  @@index([legalEntityId])
  @@index([linkedScheduleTemplateId])
  @@index([countryIsoCode])
  @@index([languageIsoCode])
  @@index([phone1CountryIsoCode])
  @@index([phone2CountryIsoCode])
  @@map("clinics")
}

model ClinicTemplateAssignment {
  id         String           @id @default(cuid())
  clinicId   String
  templateId String
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  clinic     Clinic           @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  template   ScheduleTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([clinicId, templateId, startDate])
  @@index([clinicId])
  @@index([templateId])
  @@map("clinic_template_assignments")
}

model Role {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  systemId          String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  system            System                 @relation(fields: [systemId], references: [id], onDelete: Cascade)
  users             UserRole[]
  permissions       RolePermission[]
  clinicAssignments UserClinicAssignment[]

  @@unique([name, systemId])
  @@index([systemId])
  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  action      String
  module      String
  description String?
  createdAt   DateTime         @default(now())
  roles       RolePermission[]

  @@unique([action, module])
  @@map("permissions")
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime   @default(now())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model Company {
  id                String              @id @default(cuid())
  fiscalName        String
  taxId             String              @unique
  address           String?
  city              String?
  postalCode        String?
  countryIsoCode    String?
  phone             String?
  email             String?             @unique
  website           String?
  notes             String?
  systemId          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  country           CountryInfo?        @relation(fields: [countryIsoCode], references: [isoCode])
  system            System              @relation(fields: [systemId], references: [id], onDelete: Cascade)
  purchaseInvoices  Invoice[]           @relation("PurchaseInvoices")
  payerPayments     Payment[]           @relation("PayerCompanyPayments")
  saleInvoices      Invoice[]           @relation("SaleInvoices")
  tickets           Ticket[]
  supplierExpenses  Expense[]           @relation("SupplierExpenses")
  personLeadData    PersonLeadData[]
  personContactData PersonContactData[]
  personClientData  PersonClientData[]  @relation("PersonClientCompany")

  @@unique([taxId, systemId])
  @@index([systemId])
  @@index([countryIsoCode])
}

model EntityRelation {
  id           String   @id @default(cuid())
  entityAType  String
  entityAId    String
  entityBType  String
  entityBId    String
  relationType String
  direction    String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  systemId     String
  system       System   @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@unique([entityAType, entityAId, entityBType, entityBId, relationType])
  @@index([entityAId])
  @@index([entityBId])
  @@index([systemId])
  @@map("entity_relations")
}

model EmploymentContract {
  id           String    @id @default(cuid())
  userId       String
  contractType String?
  startDate    DateTime
  endDate      DateTime?
  jobTitle     String?
  salaryInfo   String?
  details      String?
  documentUrl  String?
  systemId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  system       System    @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([systemId])
  @@map("employment_contracts")
}

model TimeLog {
  id              String    @id @default(cuid())
  userId          String
  clockInTime     DateTime
  clockOutTime    DateTime?
  date            DateTime  @db.Date
  durationMinutes Int?
  notes           String?
  source          String?
  systemId        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  personId        String?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  system          System    @relation(fields: [systemId], references: [id], onDelete: Cascade)
  person          Person?   @relation(fields: [personId], references: [id])

  @@index([userId, date])
  @@index([userId])
  @@index([systemId])
  @@index([personId])
  @@map("time_logs")
}

model Bank {
  id                   String                    @id(map: "Bank_pkey") @default(cuid())
  name                 String
  code                 String?
  phone                String?
  phone1CountryIsoCode String?
  phone2               String?
  phone2CountryIsoCode String?
  email                String?
  address              String?
  isGlobal             Boolean                   @default(true)
  systemId             String
  countryIsoCode       String?
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  accountId            String?
  system               System                    @relation(fields: [systemId], references: [id], onDelete: Cascade)
  country              CountryInfo?              @relation(fields: [countryIsoCode], references: [isoCode])
  bankAccounts         BankAccount[]
  applicableClinics    BankClinicScope[]
  account              ChartOfAccountEntry?      @relation("BankAccounts", fields: [accountId], references: [id], onDelete: SetNull)
  paymentMethods       PaymentMethodDefinition[] @relation("BankPaymentMethods")

  @@unique([name, systemId], map: "Bank_name_systemId_key")
  @@index([countryIsoCode], map: "Bank_countryIsoCode_idx")
  @@index([systemId], map: "Bank_systemId_idx")
  @@index([accountId])
  @@map("banks")
}

model BankClinicScope {
  bankId   String
  clinicId String
  bank     Bank   @relation(fields: [bankId], references: [id], onDelete: Cascade)
  clinic   Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@id([bankId, clinicId])
  @@index([clinicId])
  @@map("bank_clinic_scopes")
}

model BankAccount {
  id                    String                   @id @default(cuid())
  accountName           String
  iban                  String                   @unique
  swiftBic              String?
  currency              String                   @default("EUR")
  notes                 String?
  isActive              Boolean                  @default(true)
  isGlobal              Boolean                  @default(true)
  bankId                String
  systemId              String
  accountId             String?
  system                System                   @relation(fields: [systemId], references: [id], onDelete: Cascade)
  bank                  Bank                     @relation(fields: [bankId], references: [id], onDelete: Cascade)
  posTerminals          PosTerminal[]
  payments              Payment[]
  applicableClinics     BankAccountClinicScope[]
  clinicPaymentSettings ClinicPaymentSetting[]   @relation("BankAccountSettings")
  account               ChartOfAccountEntry?     @relation("BankAccountAccounts", fields: [accountId], references: [id], onDelete: SetNull)

  @@unique([accountName, bankId, systemId])
  @@index([bankId])
  @@index([systemId])
  @@index([accountId])
}

model BankAccountClinicScope {
  bankAccountId String
  clinicId      String
  createdAt     DateTime    @default(now())
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  clinic        Clinic      @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@id([bankAccountId, clinicId])
  @@index([bankAccountId])
  @@index([clinicId])
}

model PaymentMethodDefinition {
  id                           String                        @id @default(cuid())
  systemId                     String
  name                         String
  type                         PaymentMethodType
  details                      String?
  isActive                     Boolean                       @default(true)
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  code                         String?
  bankId                       String?
  system                       System                        @relation(fields: [systemId], references: [id], onDelete: Cascade)
  clinicSettings               ClinicPaymentSetting[]
  payments                     Payment[]
  paymentMethodAccountMappings PaymentMethodAccountMapping[]
  bank                         Bank?                         @relation("BankPaymentMethods", fields: [bankId], references: [id], onDelete: SetNull)

  @@unique([name, systemId])
  @@unique([code, systemId], name: "PaymentMethodDefinition_code_systemId_key")
  @@index([systemId])
  @@index([bankId])
  @@map("payment_method_definitions")
}

model PosTerminal {
  id                        String                      @id @default(cuid())
  name                      String
  terminalIdProvider        String?
  provider                  String?
  modelNumber               String?
  serialNumber              String?
  ipAddress                 String?
  notes                     String?
  isActive                  Boolean                     @default(true)
  isGlobal                  Boolean                     @default(true)
  systemId                  String
  bankAccountId             String?
  system                    System                      @relation(fields: [systemId], references: [id], onDelete: Cascade)
  bankAccount               BankAccount?                @relation(fields: [bankAccountId], references: [id])
  payments                  Payment[]
  clinicPaymentSettings     ClinicPaymentSetting[]      @relation("PosTerminalSettings")
  applicableClinics         PosTerminalClinicScope[]
  cashSessions              CashSession[]
  CashSessionAccountMapping CashSessionAccountMapping[]

  @@unique([name, systemId])
  @@index([bankAccountId])
  @@index([systemId])
  @@map("pos_terminals")
}

model PosTerminalClinicScope {
  posTerminalId String
  clinicId      String
  posTerminal   PosTerminal @relation(fields: [posTerminalId], references: [id], onDelete: Cascade)
  clinic        Clinic      @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@id([posTerminalId, clinicId])
  @@index([clinicId])
  @@map("pos_terminal_clinic_scopes")
}

model Equipment {
  id                 String                        @id @default(cuid())
  name               String
  description        String?
  modelNumber        String?
  purchaseDate       DateTime?
  warrantyEndDate    DateTime?
  isActive           Boolean                       @default(true)
  powerThreshold     Decimal                       @default(1.0) @db.Decimal(5,2)
  systemId           String
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt
  system             System                        @relation(fields: [systemId], references: [id], onDelete: Cascade)
  appointmentsUsing  Appointment[]
  requiredByServices ServiceEquipmentRequirement[]
  deviceUsage        AppointmentDeviceUsage[]
  spareParts         EquipmentSparePart[]
  usageLog           EquipmentUsageLog?
  clinicAssignments  EquipmentClinicAssignment[]
  categoriesUsing    Category[]                    @relation("CategoryEquipmentType") // ✅ NUEVO: Relación inversa

  @@unique([name, systemId])
  @@index([systemId])
  @@map("equipment")
}

model EquipmentClinicAssignment {
  id                String                  @id @default(cuid())
  equipmentId       String
  clinicId          String
  cabinId           String?                 // Cabina donde se instala (opcional)
  deviceName        String?                 // Alias/nombre descriptivo del dispositivo
  serialNumber      String                  @unique
  deviceId          String                  @unique
  isActive          Boolean                 @default(true)
  assignedAt        DateTime                @default(now())
  unassignedAt      DateTime?
  notes             String?
  systemId          String
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  
  // Relaciones
  equipment         Equipment               @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  clinic            Clinic                  @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  cabin             Cabin?                  @relation(fields: [cabinId], references: [id], onDelete: SetNull)
  system            System                  @relation(fields: [systemId], references: [id], onDelete: Cascade)
  installations     SparePartInstallation[]
  deviceUsage       AppointmentDeviceUsage[]
  appointments      Appointment[]           @relation("EquipmentClinicAssignmentAppointments")
  smartPlugDevice   SmartPlugDevice?        // Nueva relación con dispositivos IoT
  
  @@unique([equipmentId, clinicId, serialNumber])
  @@index([equipmentId])
  @@index([clinicId])
  @@index([cabinId])
  @@index([serialNumber])
  @@index([deviceId])
  @@index([systemId])
  @@map("equipment_clinic_assignments")
}

model Device {
  id                  String                   @id @default(cuid())
  name                String
  deviceIdProvider    String?                  @unique
  deviceType          String?
  apiEndpoint         String?
  lastKnownStatus     DeviceStatus?
  notes               String?
  systemId            String
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  system              System                   @relation(fields: [systemId], references: [id], onDelete: Cascade)
  usageRecords        AppointmentDeviceUsage[]

  @@index([systemId])
  @@index([deviceIdProvider])
  @@map("devices")
}

model Appointment {
  id                           String                     @id @default(cuid())
  startTime                    DateTime                   @db.Timestamptz(6)
  endTime                      DateTime                   @db.Timestamptz(6)
  durationMinutes              Int
  status                       AppointmentStatus          @default(SCHEDULED)
  notes                        String?
  clientNotes                  String?
  professionalUserId           String
  systemId                     String
  clinicId                     String
  equipmentId                  String?
  equipmentClinicAssignmentId  String?                    // Referencia a la instancia específica
  deviceActivationTimestamp    DateTime?                  @db.Timestamptz(6)
  deviceDeactivationTimestamp  DateTime?                  @db.Timestamptz(6)
  actualUsageMinutes           Int?
  isUsageLocked                Boolean                    @default(false)
  originalAppointmentId        String?
  createdAt                    DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                    DateTime                   @updatedAt @db.Timestamptz(6)
  estimatedDurationMinutes     Int?
  personId                     String
  roomId                       String?
  person                       Person                     @relation(fields: [personId], references: [id])
  professionalUser             User                       @relation("ProfessionalUserAppointments", fields: [professionalUserId], references: [id])
  system                       System                     @relation(fields: [systemId], references: [id], onDelete: Cascade)
  clinic                       Clinic                     @relation(fields: [clinicId], references: [id])
  equipment                    Equipment?                 @relation(fields: [equipmentId], references: [id], onDelete: SetNull)
  equipmentClinicAssignment    EquipmentClinicAssignment? @relation("EquipmentClinicAssignmentAppointments", fields: [equipmentClinicAssignmentId], references: [id], onDelete: SetNull)
  relatedTicket                Ticket?
  services                     AppointmentService[]
  tags                         AppointmentTag[]
  extensions                   AppointmentExtension[]
  deviceUsage                  AppointmentDeviceUsage[]

  @@index([startTime])
  @@index([personId])
  @@index([professionalUserId])
  @@index([systemId])
  @@index([clinicId])
  @@index([equipmentId])
  @@index([equipmentClinicAssignmentId])
  @@index([status])
  @@index([originalAppointmentId])
  @@index([roomId])
  @@map("appointments")
}

model AppointmentExtension {
  id               String      @id @default(cuid())
  appointmentId    String
  previousDuration Int
  newDuration      Int
  reason           String?
  createdAt        DateTime    @default(now())
  extendedByUserId String
  extendedMinutes  Int
  appointment      Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  extendedByUser   User        @relation(fields: [extendedByUserId], references: [id])

  @@index([appointmentId])
  @@index([extendedByUserId])
  @@index([createdAt])
  @@map("appointment_extensions")
}

model AppointmentDeviceUsage {
  id                           String                     @id @default(cuid())
  appointmentId                String
  appointmentServiceId         String?
  equipmentId                  String?                    // Null si es sin equipamiento
  equipmentClinicAssignmentId  String?                    // Referencia a la instancia específica utilizada
  deviceId                     String?                    // Null si es sin equipamiento
  startedAt                    DateTime?                  @db.Timestamptz(6)
  endedAt                      DateTime?                  @db.Timestamptz(6)
  estimatedMinutes             Float
  actualMinutes                Float?
  
  // 🆕 CAMPOS DE PAUSAS MEJORADOS
  pauseIntervals               Json?                      // Array de {pausedAt, resumedAt, reason?, durationMinutes?}
  currentStatus                DeviceUsageStatus          @default(ACTIVE) // ACTIVE, PAUSED, COMPLETED, AUTO_SHUTDOWN
  pausedAt                     DateTime?                  @db.Timestamptz(6) // Para estado actual de pausa
  
  energyConsumption            Float?
  deviceData                   Json?
  startedByUserId              String
  systemId                     String
  createdAt                    DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                    DateTime                   @updatedAt @db.Timestamptz(6)
  appointment                  Appointment                @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentService           AppointmentService?        @relation(fields: [appointmentServiceId], references: [id], onDelete: SetNull)
  equipment                    Equipment?                 @relation(fields: [equipmentId], references: [id], onDelete: SetNull)
  equipmentClinicAssignment    EquipmentClinicAssignment? @relation(fields: [equipmentClinicAssignmentId], references: [id], onDelete: SetNull)
  device                       Device?                    @relation(fields: [deviceId], references: [id], onDelete: SetNull)
  startedByUser                User                       @relation("DeviceUsageStartedBy", fields: [startedByUserId], references: [id])
  system                       System                     @relation(fields: [systemId], references: [id], onDelete: Cascade)
  endedReason     UsageEndedReason?
  usageOutcome    UsageOutcome?

  @@index([appointmentId])
  @@index([startedAt])
  @@index([deviceId])
  @@index([equipmentId])
  @@index([equipmentClinicAssignmentId])
  @@index([systemId])
  @@index([appointmentServiceId])
  @@index([startedByUserId])
  @@index([currentStatus])
  @@map("appointment_device_usage")
}

model AppointmentService {
  id                     String                   @id @default(cuid())
  appointmentId          String
  serviceId              String
  quantity               Int                      @default(1)
  status                 AppointmentServiceStatus @default(SCHEDULED)
  sortOrder              Int                      @default(0)
  estimatedDuration      Int?
  notes                  String?
  validatedAt            DateTime?                @db.Timestamptz(6)
  validatedByUserId      String?
  cancellationReason     String?
  serviceStartedAt       DateTime?                @db.Timestamptz(6)
  serviceStartedByUserId String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  appointment            Appointment              @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service                Service                  @relation(fields: [serviceId], references: [id])
  validatedByUser        User?                    @relation("ValidatedAppointmentServices", fields: [validatedByUserId], references: [id])
  serviceStartedByUser   User?                    @relation("ServiceStartedBy", fields: [serviceStartedByUserId], references: [id])
  deviceUsage            AppointmentDeviceUsage[]

  @@unique([appointmentId, serviceId])
  @@index([appointmentId])
  @@index([serviceId])
  @@index([status])
  @@index([validatedAt])
  @@index([validatedByUserId])
  @@index([serviceStartedAt])
  @@index([serviceStartedByUserId])
  @@map("appointment_services")
}

model Tag {
  id           String           @id @default(cuid())
  systemId     String
  name         String
  color        String
  description  String?
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime         @updatedAt @db.Timestamptz(3)
  system       System           @relation(fields: [systemId], references: [id], onDelete: Cascade)
  appointments AppointmentTag[]

  @@unique([systemId, name])
  @@index([systemId])
}

model AppointmentTag {
  appointmentId String
  tagId         String
  createdAt     DateTime    @default(now()) @db.Timestamptz(3)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([appointmentId, tagId])
  @@index([appointmentId])
  @@index([tagId])
}

model ScheduleTemplate {
  id                         String                     @id @default(cuid())
  name                       String
  description                String?
  systemId                   String
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime                   @updatedAt
  closeTime                  String?
  openTime                   String?
  slotDuration               Int?
  createGranularity          Int?                       @default(5)
  system                     System                     @relation(fields: [systemId], references: [id], onDelete: Cascade)
  blocks                     ScheduleTemplateBlock[]
  linkedClinics              Clinic[]                   @relation("LinkedClinicTemplate")
  clinicExceptionAssignments ClinicTemplateAssignment[]

  @@unique([name, systemId])
  @@index([systemId])
  @@map("schedule_templates")
}

model ScheduleTemplateBlock {
  id         String           @id @default(cuid())
  templateId String
  dayOfWeek  DayOfWeek
  startTime  String
  endTime    String
  isWorking  Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  template   ScheduleTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@map("schedule_template_blocks")
}

model ClinicSchedule {
  id                String   @id @default(cuid())
  clinicId          String   @unique
  openTime          String?
  closeTime         String?
  slotDuration      Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createGranularity Int?     @default(5)
  clinic            Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@index([clinicId])
  @@map("clinic_schedules")
}

model ClinicScheduleBlock {
  id        String    @id @default(cuid())
  clinicId  String
  dayOfWeek DayOfWeek
  startTime String
  endTime   String
  isWorking Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  clinic    Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@index([clinicId])
  @@map("clinic_schedule_blocks")
}

model Service {
  id                          String                  @id @default(cuid())
  name                        String
  description                 String?
  durationMinutes             Int                     // Duración total de cita (mantenemos compatibilidad)
  treatmentDurationMinutes    Int                     @default(0) // Nuevo: duración real de tratamiento (para IoT)
  price                       Float?
  colorCode                   String?
  systemId                    String
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt
  categoryId                  String?
  code                        String?
  vatTypeId                   String?
  system                      System                  @relation(fields: [systemId], references: [id], onDelete: Cascade)
  ticketItems                 TicketItem[]
  invoiceItems                InvoiceItem[]
  bonoDefinitions             BonoDefinition[]
  includedInPackages          PackageItem[]
  category                    Category?               @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  vatType                     VATType?                @relation(fields: [vatTypeId], references: [id], onDelete: SetNull)
  tariffPrices                TariffServicePrice[]
  consumptions                ServiceConsumption[]
  settings                    ServiceSetting?
  targetedPromotions          Promotion[]             @relation("TargetService")
  bogoGiftPromotions          Promotion[]             @relation("BogoService")
  serviceAccountMappings      ServiceAccountMapping[]
  appointmentServices         AppointmentService[]

  @@unique([name, systemId])
  @@index([systemId])
  @@index([categoryId])
  @@index([vatTypeId])
  @@map("services")
}

model ServiceSetting {
  id                     String                        @id @default(cuid())
  serviceId              String                        @unique
  isActive               Boolean                       @default(true)  // ✅ NUEVO: Campo para activar/desactivar servicios
  requiresMedicalSignOff Boolean                       @default(false)
  pointsAwarded          Int                           @default(0)
  commissionType         String?
  commissionValue        Float?
  requiresParams         Boolean                       @default(false)
  appearsInApp           Boolean                       @default(true)
  autoAddToInvoice       Boolean                       @default(false)
  onlineBookingEnabled   Boolean                       @default(true)
  minTimeBeforeBooking   Int?
  maxTimeBeforeBooking   Int?
  cancellationPolicy     String?
  preparationTimeMinutes Int?
  cleanupTimeMinutes     Int?
  internalNotes          String?
  service                Service                       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  equipmentRequirements  ServiceEquipmentRequirement[]
  skillRequirements      ServiceSkillRequirement[]

  @@map("service_settings")
}

model ServiceEquipmentRequirement {
  serviceId   String
  equipmentId String
  service     ServiceSetting @relation(fields: [serviceId], references: [serviceId], onDelete: Cascade)
  equipment   Equipment      @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@id([serviceId, equipmentId])
  @@index([equipmentId])
  @@map("service_equipment_requirements")
}

model ServiceSkillRequirement {
  serviceId String
  skillId   String
  service   ServiceSetting @relation(fields: [serviceId], references: [serviceId], onDelete: Cascade)
  skill     Skill          @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([serviceId, skillId])
  @@index([skillId])
  @@map("service_skill_requirements")
}

model Product {
  id                     String                  @id @default(cuid())
  name                   String
  description            String?
  sku                    String?                 @unique
  barcode                String?
  price                  Float?
  costPrice              Float?
  systemId               String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  categoryId             String?
  vatTypeId              String?
  system                 System                  @relation(fields: [systemId], references: [id], onDelete: Cascade)
  stockMovements         StockLedger[]
  ticketItems            TicketItem[]
  invoiceItems           InvoiceItem[]
  includedInPackages     PackageItem[]
  category               Category?               @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  vatType                VATType?                @relation(fields: [vatTypeId], references: [id], onDelete: SetNull)
  productPrices          TariffProductPrice[]
  consumptions           ServiceConsumption[]
  settings               ProductSetting?
  BonoDefinition         BonoDefinition[]
  targetedPromotions     Promotion[]             @relation("TargetProduct")
  bogoGiftPromotions     Promotion[]             @relation("BogoProduct")
  productAccountMappings ProductAccountMapping[]
  equipmentSpareParts    EquipmentSparePart[]

  @@unique([name, systemId])
  @@index([systemId])
  @@index([categoryId])
  @@index([vatTypeId])
  @@map("products")
}

model ProductSetting {
  id                String  @id @default(cuid())
  productId         String  @unique
  currentStock      Int     @default(0)
  minStockThreshold Int?
  isForSale         Boolean @default(true)
  isInternalUse     Boolean @default(false)
  isActive          Boolean @default(true)
  pointsAwarded     Int     @default(0)
  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_settings")
}

model StockLedger {
  id           String            @id @default(cuid())
  productId    String
  movementType StockMovementType
  quantity     Int
  movementDate DateTime          @default(now())
  notes        String?
  userId       String?
  systemId     String
  createdAt    DateTime          @default(now())
  product      Product           @relation(fields: [productId], references: [id])
  user         User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  system       System            @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([movementDate])
  @@index([userId])
  @@index([systemId])
  @@index([movementType])
  @@map("stock_ledgers")
}

model ServiceConsumption {
  id        String   @id @default(cuid())
  serviceId String
  productId String
  quantity  Float
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     String?
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([productId])
  @@map("service_consumptions")
}

model EquipmentSparePart {
  id                    String   @id @default(cuid())
  equipmentId           String   
  productId             String   
  
  // Configuración específica del recambio
  partName              String   
  partNumber            String?  
  compatibleModels      String?  
  
  // Configuración de mantenimiento
  recommendedLifespan   Int?     
  warningThreshold      Int?     
  criticalThreshold     Int?     
  
  // Configuración adicional
  installationNotes     String?  
  isRequired            Boolean  @default(true) 
  category              String?  
  costPrice             Float?   // Coste específico del recambio (puede diferir del producto)
  
  systemId              String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relaciones
  equipment             Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  product               Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  system                System    @relation(fields: [systemId], references: [id], onDelete: Cascade)
  installations         SparePartInstallation[]
  
  @@unique([equipmentId, productId])
  @@index([equipmentId])
  @@index([productId])
  @@map("equipment_spare_parts")
}

model SparePartInstallation {
  id                             String                     @id @default(cuid())
  equipmentSparePartId           String
  equipmentClinicAssignmentId    String                     // Nueva referencia a la instancia específica
  
  // Datos de la instalación
  installedAt                    DateTime
  installedByUserId              String
  
  // Tipo de instalación y referencias
  installationType               InstallationType           @default(INITIAL_INSTALLATION)
  replacedInstallationId         String?                    // Referencia a la instalación anterior que se reemplaza
  replacementReason              ReplacementReason?         // Motivo de la sustitución (solo para REPLACEMENT)
  
  // Estado y seguimiento
  isActive                       Boolean                    @default(true) 
  removedAt                      DateTime?
  removedByUserId                String?
  
  // Datos del recambio específico
  serialNumber                   String?  
  batchNumber                    String?  
  costPrice                      Float?   
  
  // Seguimiento de uso (se calcula desde AppointmentDeviceUsage)
  initialUsageHours              Float                      @default(0) 
  currentUsageHours              Float                      @default(0) 
  estimatedEndOfLife             DateTime? 
  
  // Notas y observaciones
  installationNotes              String?
  removalReason                  String?
  condition                      String?  
  
  systemId                       String
  createdAt                      DateTime                   @default(now())
  updatedAt                      DateTime                   @updatedAt
  
  // Relaciones
  equipmentSparePart             EquipmentSparePart         @relation(fields: [equipmentSparePartId], references: [id], onDelete: Cascade)
  equipmentClinicAssignment      EquipmentClinicAssignment  @relation(fields: [equipmentClinicAssignmentId], references: [id], onDelete: Cascade)
  installedByUser                User                       @relation("SparePartInstalledBy", fields: [installedByUserId], references: [id])
  removedByUser                  User?                      @relation("SparePartRemovedBy", fields: [removedByUserId], references: [id])
  system                         System                     @relation(fields: [systemId], references: [id], onDelete: Cascade)
  
  // Referencia a la instalación que se reemplaza (sin auto-referencia completa para evitar ciclos)
  // La relación inversa se puede consultar mediante queries si es necesario
  
  @@index([equipmentSparePartId])
  @@index([equipmentClinicAssignmentId])
  @@index([installedAt])
  @@index([isActive])
  @@index([replacedInstallationId])
  @@map("spare_part_installations")
}

model EquipmentUsageLog {
  id          String   @id @default(cuid())
  equipmentId String   @unique
  
  // Datos de uso acumulado
  totalHours  Float    @default(0)
  lastUpdated DateTime @default(now())
  
  // Seguimiento por período
  dailyHours  Float    @default(0)
  weeklyHours Float    @default(0)
  monthlyHours Float   @default(0)
  
  systemId    String
  
  // Relaciones
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  system      System    @relation(fields: [systemId], references: [id], onDelete: Cascade)
  
  @@map("equipment_usage_logs")
}

model VATType {
  id                     String                  @id @default(cuid())
  name                   String
  systemId               String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  isDefault              Boolean                 @default(false)
  rate                   Float
  code                   String
  legalEntityId          String?
  system                 System                  @relation(fields: [systemId], references: [id], onDelete: Cascade)
  legalEntity            LegalEntity?            @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  services               Service[]
  products               Product[]
  tariffs                Tariff[]
  appliedTicketItems     TicketItem[]            @relation("AppliedVATType")
  originalTicketItems    TicketItem[]            @relation("OriginalVATType")
  invoiceItems           InvoiceItem[]            @relation("AppliedInvoiceVATType")
  tariffServicePrices    TariffServicePrice[]
  tariffProductPrices    TariffProductPrice[]
  tariffBonoPrices       TariffBonoPrice[]
  tariffPackagePrices    TariffPackagePrice[]
  vatTypeAccountMappings VATTypeAccountMapping[]
  expenses               Expense[]
  BonoDefinition         BonoDefinition[]

  @@unique([code, systemId])
  @@index([systemId])
  @@index([legalEntityId])
  @@map("vat_types")
}

model Tariff {
  id                 String               @id @default(cuid())
  name               String
  description        String?
  isDefault          Boolean              @default(false)
  validFrom          DateTime?            @db.Date
  validUntil         DateTime?            @db.Date
  isActive           Boolean              @default(true)
  systemId           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  currencyCode       String
  vatTypeId          String
  vatType            VATType              @relation(fields: [vatTypeId], references: [id], onDelete: Restrict)
  system             System               @relation(fields: [systemId], references: [id], onDelete: Cascade)
  clinics            Clinic[]
  servicePrices      TariffServicePrice[]
  productPrices      TariffProductPrice[]
  bonoPrices         TariffBonoPrice[]
  packagePrices      TariffPackagePrice[]
  targetedPromotions Promotion[]          @relation("TargetTariff")

  @@unique([name, systemId])
  @@index([systemId])
  @@index([vatTypeId])
  @@index([currencyCode])
  @@map("tariffs")
}

model Ticket {
  id                 String          @id @default(cuid())
  ticketNumber       String?
  status             TicketStatus    @default(OPEN)
  issueDate          DateTime        @default(now())
  totalAmount        Float
  taxAmount          Float
  finalAmount        Float
  notes              String?
  companyId          String?
  cashierUserId      String
  clinicId           String
  systemId           String
  appointmentId      String?         @unique
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  currencyCode       String          @default("EUR")
  invoiceId          String?         @unique
  originalTicketId   String?
  type               TicketType      @default(SALE)
  sellerUserId       String?
  ticketSeries       String?
  cashSessionId      String?
  discountAmount     Float?
  discountReason     String?
  discountType       DiscountType?
  returnReason       String?
  dueAmount          Float?
  hasOpenDebt        Boolean         @default(false)
  paidAmountDirectly Float           @default(0)
  paidAmount         Float           @default(0)
  pendingAmount      Float           @default(0)
  documentSeriesId   String?
  personId           String?
  person             Person?         @relation(fields: [personId], references: [id])
  company            Company?        @relation(fields: [companyId], references: [id])
  cashierUser        User            @relation("CashierUserTickets", fields: [cashierUserId], references: [id])
  sellerUser         User?           @relation("SellerUserTickets", fields: [sellerUserId], references: [id], onDelete: SetNull)
  clinic             Clinic          @relation(fields: [clinicId], references: [id])
  system             System          @relation("SystemTickets", fields: [systemId], references: [id], onDelete: Cascade)
  appointment        Appointment?    @relation(fields: [appointmentId], references: [id], onDelete: SetNull, map: "appointment_ticket_relation")
  originalTicket     Ticket?         @relation("TicketReturns", fields: [originalTicketId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  returnTickets      Ticket[]        @relation("TicketReturns")
  invoice            Invoice?        @relation("TicketInvoiceRelation")
  cashSession        CashSession?    @relation("TicketsAccountedInSession", fields: [cashSessionId], references: [id], onDelete: SetNull)
  documentSeries     DocumentSeries? @relation(fields: [documentSeriesId], references: [id], onDelete: SetNull)
  items              TicketItem[]
  payments           Payment[]
  relatedDebts       DebtLedger[]    @relation("TicketDebts")
  journalEntries     JournalEntry[]

  @@unique([ticketNumber, clinicId, systemId])
  @@index([type])
  @@index([status])
  @@index([issueDate])
  @@index([personId])
  @@index([companyId])
  @@index([cashierUserId])
  @@index([sellerUserId])
  @@index([ticketSeries])
  @@index([clinicId])
  @@index([systemId])
  @@index([appointmentId])
  @@index([originalTicketId])
  @@index([invoiceId])
  @@index([cashSessionId])
  @@index([documentSeriesId])
  @@map("tickets")
}

model TicketItem {
  id                        String             @id @default(cuid())
  ticketId                  String
  serviceId                 String?
  productId                 String?
  description               String
  quantity                  Float
  unitPrice                 Float
  vatAmount                 Float
  finalPrice                Float
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  originalVatTypeId         String?
  vatRateId                 String?
  appliedPromotionId        String?
  bonoDefinitionId          String?
  consumedBonoInstanceId    String?
  consumedPackageInstanceId String?
  isPriceOverridden         Boolean            @default(false)
  manualDiscountAmount      Float              @default(0)
  originalUnitPrice         Float?
  packageDefinitionId       String?
  professionalUserId        String?
  promotionDiscountAmount   Float              @default(0)
  discountNotes             String?
  isValidationGenerated     Boolean            @default(false)
  manualDiscountPercentage  Float?
  itemType                  TicketItemType
  ticket                    Ticket             @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  service                   Service?           @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  product                   Product?           @relation(fields: [productId], references: [id], onDelete: SetNull)
  bonoDefinition            BonoDefinition?    @relation("PurchasedBonos", fields: [bonoDefinitionId], references: [id], onDelete: SetNull)
  packageDefinition         PackageDefinition? @relation("PurchasedPackages", fields: [packageDefinitionId], references: [id], onDelete: SetNull)
  appliedPromotion          Promotion?         @relation(fields: [appliedPromotionId], references: [id], onDelete: SetNull)
  vatRate                   VATType?           @relation("AppliedVATType", fields: [vatRateId], references: [id], onDelete: SetNull)
  originalVatType           VATType?           @relation("OriginalVATType", fields: [originalVatTypeId], references: [id], onDelete: SetNull)
  consumedBonoInstance      BonoInstance?      @relation("ConsumedBonoSessions", fields: [consumedBonoInstanceId], references: [id], onDelete: SetNull)
  consumedPackageInstance   PackageInstance?   @relation("ConsumedPackageItems", fields: [consumedPackageInstanceId], references: [id], onDelete: SetNull)

  @@index([ticketId])
  @@index([serviceId])
  @@index([productId])
  @@index([bonoDefinitionId])
  @@index([packageDefinitionId])
  @@index([vatRateId])
  @@index([originalVatTypeId])
  @@index([consumedBonoInstanceId])
  @@index([consumedPackageInstanceId])
  @@index([appliedPromotionId])
  @@index([isValidationGenerated])
  @@map("ticket_items")
}

model Invoice {
  id                 String         @id @default(cuid())
  invoiceNumber      String
  invoiceSeries      String
  type               InvoiceType
  issueDate          DateTime       @default(now())
  dueDate            DateTime?
  companyId          String?
  supplierCompanyId  String?
  emitterFiscalName  String?
  emitterTaxId       String?
  emitterAddress     String?
  receiverFiscalName String?
  receiverTaxId      String?
  receiverAddress    String?
  currencyCode       String
  subtotalAmount     Float
  discountAmount     Float          @default(0)
  taxAmount          Float
  totalAmount        Float
  notes              String?
  ticketId           String?        @unique
  originalInvoiceId  String?
  systemId           String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  status             String?
  personId           String?
  person             Person?        @relation(fields: [personId], references: [id])
  company            Company?       @relation("SaleInvoices", fields: [companyId], references: [id], onDelete: Restrict)
  supplierCompany    Company?       @relation("PurchaseInvoices", fields: [supplierCompanyId], references: [id], onDelete: Restrict)
  originalInvoice    Invoice?       @relation("InvoiceReturns", fields: [originalInvoiceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  returnInvoices     Invoice[]      @relation("InvoiceReturns")
  system             System         @relation("SystemInvoices", fields: [systemId], references: [id], onDelete: Restrict)
  items              InvoiceItem[]
  ticket             Ticket?        @relation("TicketInvoiceRelation", fields: [ticketId], references: [id], onDelete: SetNull, onUpdate: Restrict)
  payments           Payment[]
  relatedDebts       DebtLedger[]
  journalEntries     JournalEntry[]

  @@unique([invoiceSeries, invoiceNumber, systemId])
  @@index([type])
  @@index([status])
  @@index([issueDate])
  @@index([personId])
  @@index([companyId])
  @@index([supplierCompanyId])
  @@index([ticketId])
  @@index([originalInvoiceId])
  @@index([systemId])
  @@map("invoices")
}

model InvoiceItem {
  id             String   @id @default(cuid())
  invoiceId      String
  description    String
  quantity       Float
  unitPrice      Float
  discountAmount Float    @default(0)
  productId      String?
  serviceId      String?
  vatRateId      String?
  vatPercentage  Float
  vatAmount      Float
  finalPrice     Float
  createdAt      DateTime @default(now())
  invoice        Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product        Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  service        Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  vatRate        VATType? @relation("AppliedInvoiceVATType", fields: [vatRateId], references: [id], onDelete: SetNull)

  @@index([invoiceId])
  @@index([productId])
  @@index([serviceId])
  @@index([vatRateId])
  @@map("invoice_items")
}

model Payment {
  id                        String                   @id @default(cuid())
  type                      PaymentType
  amount                    Float
  paymentDate               DateTime
  status                    String?
  transactionReference      String?
  notes                     String?
  systemId                  String
  clinicId                  String?
  userId                    String
  ticketId                  String?
  invoiceId                 String?
  paymentMethodDefinitionId String?
  posTerminalId             String?
  bankAccountId             String?
  cashSessionId             String?
  bonoInstanceId            String?
  payerCompanyId            String?
  debtLedgerId              String?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  payerPersonId             String?
  debtLedger                DebtLedger?              @relation("DebtPayments", fields: [debtLedgerId], references: [id], onDelete: SetNull)
  system                    System                   @relation(fields: [systemId], references: [id], onDelete: Cascade)
  clinic                    Clinic?                  @relation(fields: [clinicId], references: [id])
  user                      User                     @relation(fields: [userId], references: [id])
  ticket                    Ticket?                  @relation(fields: [ticketId], references: [id])
  invoice                   Invoice?                 @relation(fields: [invoiceId], references: [id])
  paymentMethodDefinition   PaymentMethodDefinition? @relation(fields: [paymentMethodDefinitionId], references: [id])
  posTerminal               PosTerminal?             @relation(fields: [posTerminalId], references: [id])
  bankAccount               BankAccount?             @relation(fields: [bankAccountId], references: [id])
  cashSession               CashSession?             @relation(fields: [cashSessionId], references: [id], onDelete: SetNull)
  bonoInstance              BonoInstance?            @relation(fields: [bonoInstanceId], references: [id])
  payerPerson               Person?                  @relation("PayerPersonPayments", fields: [payerPersonId], references: [id])
  payerCompany              Company?                 @relation("PayerCompanyPayments", fields: [payerCompanyId], references: [id])
  verification              PaymentVerification?
  journalEntries            JournalEntry[]
  Expense                   Expense[]

  @@index([systemId])
  @@index([clinicId])
  @@index([userId])
  @@index([ticketId])
  @@index([invoiceId])
  @@index([paymentMethodDefinitionId])
  @@index([posTerminalId])
  @@index([bankAccountId])
  @@index([cashSessionId])
  @@index([bonoInstanceId])
  @@index([payerPersonId])
  @@index([payerCompanyId])
  @@index([debtLedgerId])
  @@map("payments")
}

model CashSession {
  id                        String            @id @default(cuid())
  userId                    String
  clinicId                  String
  openingTime               DateTime          @default(now())
  closingTime               DateTime?
  status                    CashSessionStatus @default(OPEN)
  notes                     String?
  systemId                  String
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  countedBankTransfer       Float?
  countedCard               Float?
  countedCash               Float?
  countedCheck              Float?
  differenceCash            Float?
  expectedCash              Float?
  openingBalanceCash        Float
  posTerminalId             String?
  reconciliationTime        DateTime?
  sessionNumber             String
  countedInternalCredit     Float?
  countedOther              Json?
  hasChangesAfterReconcile  Boolean           @default(false)
  calculatedDeferredAtClose Float?
  cashWithdrawals           Decimal?          @default(0)
  manualCashInput           Decimal?          @default(0)
  cashExpenses              Decimal?          @default(0)
  user                      User              @relation("UserCashSessions", fields: [userId], references: [id])
  clinic                    Clinic            @relation(fields: [clinicId], references: [id])
  posTerminal               PosTerminal?      @relation(fields: [posTerminalId], references: [id])
  system                    System            @relation(fields: [systemId], references: [id], onDelete: Cascade)
  payments                  Payment[]
  originatedDebts           DebtLedger[]      @relation("DebtsOriginatingInSession")
  journalEntries            JournalEntry[]
  ticketsAccountedInSession Ticket[]          @relation("TicketsAccountedInSession")

  @@unique([clinicId, sessionNumber, systemId])
  @@index([userId, clinicId, openingTime])
  @@index([status])
  @@index([userId])
  @@index([clinicId])
  @@index([posTerminalId])
  @@map("cash_sessions")
}

model BonoDefinition {
  id                 String                 @id @default(cuid())
  name               String
  description        String?
  serviceId          String?
  price              Float
  validityDays       Int?
  systemId           String
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  costPrice          Float?
  productId          String?
  quantity           Int                    @map("quantity")
  vatTypeId          String?
  service            Service?               @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  product            Product?               @relation(fields: [productId], references: [id], onDelete: SetNull)
  vatType            VATType?               @relation(fields: [vatTypeId], references: [id], onDelete: SetNull)
  system             System                 @relation(fields: [systemId], references: [id], onDelete: Cascade)
  settings           BonoDefinitionSetting?
  instances          BonoInstance[]
  tariffPrices       TariffBonoPrice[]
  ticketItems        TicketItem[]           @relation("PurchasedBonos")
  targetedPromotions Promotion[]            @relation("TargetBonoDefinition")

  @@unique([name, systemId])
  @@index([systemId])
  @@index([serviceId])
  @@index([productId])
  @@index([vatTypeId])
  @@map("bono_definitions")
}

model BonoDefinitionSetting {
  id               String         @id @default(cuid())
  bonoDefinitionId String         @unique
  validityDays     Int?
  costPrice        Float?
  commissionType   String?
  commissionValue  Float?
  appearsInApp     Boolean        @default(true)
  autoAddToInvoice Boolean        @default(false)
  isActive         Boolean        @default(true)
  pointsAwarded    Int            @default(0)
  bonoDefinition   BonoDefinition @relation(fields: [bonoDefinitionId], references: [id], onDelete: Cascade)

  @@map("bono_definition_settings")
}

model BonoInstance {
  id                   String         @id @default(cuid())
  bonoDefinitionId     String
  purchaseDate         DateTime       @default(now())
  expiryDate           DateTime?
  purchaseTicketItemId String?        @unique
  systemId             String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  remainingQuantity    Int
  personId             String?
  bonoDefinition       BonoDefinition @relation(fields: [bonoDefinitionId], references: [id])
  person               Person?        @relation(fields: [personId], references: [id])
  system               System         @relation(fields: [systemId], references: [id], onDelete: Cascade)
  consumedItems        TicketItem[]   @relation("ConsumedBonoSessions")
  payments             Payment[]

  @@index([personId])
  @@index([bonoDefinitionId])
  @@index([systemId])
  @@index([purchaseTicketItemId])
  @@map("bono_instances")
}

model PackageDefinition {
  id                 String                    @id @default(cuid())
  name               String
  description        String?
  price              Float
  systemId           String
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  system             System                    @relation(fields: [systemId], references: [id], onDelete: Cascade)
  items              PackageItem[]
  tariffPrices       TariffPackagePrice[]
  ticketItems        TicketItem[]              @relation("PurchasedPackages")
  packageInstances   PackageInstance[]
  settings           PackageDefinitionSetting?
  targetedPromotions Promotion[]               @relation("TargetPackageDefinition")

  @@unique([name, systemId])
  @@index([systemId])
  @@map("package_definitions")
}

model PackageDefinitionSetting {
  id                  String            @id @default(cuid())
  packageDefinitionId String            @unique
  isActive            Boolean           @default(true)
  pointsAwarded       Int               @default(0)
  packageDefinition   PackageDefinition @relation(fields: [packageDefinitionId], references: [id], onDelete: Cascade)

  @@map("package_definition_settings")
}

model PackageItem {
  id                  String            @id @default(cuid())
  packageDefinitionId String
  itemType            String
  serviceId           String?
  productId           String?
  quantity            Float
  createdAt           DateTime          @default(now())
  price               Float?
  packageDefinition   PackageDefinition @relation(fields: [packageDefinitionId], references: [id], onDelete: Cascade)
  service             Service?          @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  product             Product?          @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([packageDefinitionId])
  @@index([serviceId])
  @@index([productId])
  @@map("package_items")
}

model PackageInstance {
  id                   String            @id @default(cuid())
  packageDefinitionId  String
  purchaseDate         DateTime          @default(now())
  purchaseTicketItemId String?           @unique
  remainingItems       Json
  systemId             String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  personId             String?
  packageDefinition    PackageDefinition @relation(fields: [packageDefinitionId], references: [id])
  person               Person?           @relation(fields: [personId], references: [id])
  system               System            @relation(fields: [systemId], references: [id], onDelete: Cascade)
  consumedItems        TicketItem[]      @relation("ConsumedPackageItems")

  @@index([personId])
  @@index([packageDefinitionId])
  @@index([systemId])
  @@index([purchaseTicketItemId])
  @@map("package_instances")
}

model Promotion {
  id                        String                    @id @default(cuid())
  name                      String
  description               String?
  code                      String?                   @unique
  type                      PromotionType
  value                     Float?
  minPurchaseAmount         Float?
  maxDiscountAmount         Float?
  startDate                 DateTime?
  endDate                   DateTime?
  isActive                  Boolean                   @default(true)
  systemId                  String
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  bogoBuyQuantity           Int?
  bogoGetProductId          String?
  bogoGetQuantity           Int?
  bogoGetServiceId          String?
  bogoGetValue              Float?
  maxTotalUses              Int?
  maxUsesPerClient          Int?
  targetBonoDefinitionId    String?
  targetCategoryId          String?
  targetPackageDefinitionId String?
  targetProductId           String?
  targetScope               PromotionTargetScope
  targetServiceId           String?
  targetTariffId            String?
  accumulationMode          PromotionAccumulationMode @default(EXCLUSIVE)
  system                    System                    @relation(fields: [systemId], references: [id], onDelete: Cascade)
  targetService             Service?                  @relation("TargetService", fields: [targetServiceId], references: [id], onDelete: Cascade)
  targetProduct             Product?                  @relation("TargetProduct", fields: [targetProductId], references: [id], onDelete: Cascade)
  targetBonoDefinition      BonoDefinition?           @relation("TargetBonoDefinition", fields: [targetBonoDefinitionId], references: [id], onDelete: Cascade)
  targetPackageDefinition   PackageDefinition?        @relation("TargetPackageDefinition", fields: [targetPackageDefinitionId], references: [id], onDelete: Cascade)
  targetCategory            Category?                 @relation("TargetCategory", fields: [targetCategoryId], references: [id], onDelete: Cascade)
  targetTariff              Tariff?                   @relation("TargetTariff", fields: [targetTariffId], references: [id], onDelete: Cascade)
  bogoGetService            Service?                  @relation("BogoService", fields: [bogoGetServiceId], references: [id], onDelete: SetNull)
  bogoGetProduct            Product?                  @relation("BogoProduct", fields: [bogoGetProductId], references: [id], onDelete: SetNull)
  applicableClinics         PromotionClinicScope[]
  definedCompatibilities    PromotionCompatibility[]  @relation("DefinedCompatibility")
  compatibleWith            PromotionCompatibility[]  @relation("CompatibleWith")
  appliedToTicketItems      TicketItem[]
  promotionAccountMappings  PromotionAccountMapping[]

  @@unique([name, systemId])
  @@index([systemId])
  @@index([code])
  @@index([startDate, endDate])
  @@index([type])
  @@index([targetScope])
  @@index([targetServiceId])
  @@index([targetProductId])
  @@index([targetBonoDefinitionId])
  @@index([targetPackageDefinitionId])
  @@index([targetCategoryId])
  @@index([targetTariffId])
  @@index([bogoGetServiceId])
  @@index([bogoGetProductId])
  @@map("promotions")
}

model LoyaltyLedger {
  id           String              @id @default(cuid())
  movementType LoyaltyMovementType
  points       Int
  movementDate DateTime            @default(now())
  notes        String?
  expiryDate   DateTime?
  userId       String?
  systemId     String
  createdAt    DateTime            @default(now())
  personId     String
  person       Person              @relation(fields: [personId], references: [id])
  user         User?               @relation("UserLogs", fields: [userId], references: [id], onDelete: SetNull)
  system       System              @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@index([personId])
  @@index([movementDate])
  @@index([systemId])
  @@index([userId])
  @@map("loyalty_ledgers")
}

model Skill {
  id                 String                    @id @default(cuid())
  name               String
  description        String?
  systemId           String
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  system             System                    @relation(fields: [systemId], references: [id], onDelete: Cascade)
  users              UserSkill[]
  requiredByServices ServiceSkillRequirement[]

  @@unique([name, systemId])
  @@index([systemId])
  @@map("skills")
}

model UserSkill {
  userId     String
  skillId    String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill      Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
  @@index([userId])
  @@index([skillId])
  @@map("user_skills")
}

model EntityImage {
  id               String     @id @default(cuid())
  entityId         String
  entityType       EntityType
  imageUrl         String
  altText          String?
  caption          String?
  order            Int?
  isProfilePic     Boolean    @default(false)
  uploadedByUserId String?
  systemId         String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  uploadedByUser   User?      @relation("UploadedImages", fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  system           System     @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@index([entityId, entityType])
  @@index([uploadedByUserId])
  @@index([systemId])
  @@map("entity_images")
}

model EntityDocument {
  id               String     @id @default(cuid())
  entityId         String
  entityType       EntityType
  documentUrl      String
  fileName         String
  fileType         String?
  fileSize         Int?
  description      String?
  uploadedByUserId String?
  systemId         String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  uploadedByUser   User?      @relation("UploadedDocuments", fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  system           System     @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@index([entityId, entityType])
  @@index([uploadedByUserId])
  @@index([systemId])
  @@map("entity_documents")
}

model UserClinicAssignment {
  userId               String
  clinicId             String
  roleId               String
  assignedAt           DateTime                      @default(now())
  userClinicScheduleId String?
  user                 User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic               Clinic                        @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  role                 Role                          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  customSchedule       UserClinicSchedule?           @relation(fields: [userClinicScheduleId], references: [id])
  customExceptions     UserClinicScheduleException[]

  @@id([userId, clinicId])
  @@index([clinicId])
  @@index([roleId])
  @@map("user_clinic_assignments")
}

model UserClinicSchedule {
  scheduleJson         Json
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  clinicId             String
  id                   String                 @id @default(cuid())
  userId               String
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic               Clinic                 @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  UserClinicAssignment UserClinicAssignment[]

  @@unique([userId, clinicId])
  @@index([userId])
  @@index([clinicId])
  @@map("user_clinic_schedules")
}

model UserClinicScheduleException {
  id           String               @id @default(cuid())
  name         String?
  startDate    DateTime             @db.Date
  endDate      DateTime             @db.Date
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  clinicId     String
  scheduleJson Json
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic       Clinic               @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  assignment   UserClinicAssignment @relation(fields: [userId, clinicId], references: [userId, clinicId], onDelete: Cascade)

  @@index([userId, clinicId, startDate])
  @@index([userId, clinicId])
  @@map("user_clinic_schedule_exceptions")
}

model Category {
  id                      String                   @id @default(cuid())
  name                    String
  description             String?
  systemId                String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  parentId                String?
  equipmentTypeId         String?                  // ✅ NUEVO: Referencia al tipo de equipamiento
  type                    CategoryType             @default(MIXED) // ✅ NUEVO: Tipo de categoría
  system                  System                   @relation(fields: [systemId], references: [id], onDelete: Cascade)
  parent                  Category?                @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children                Category[]               @relation("CategoryHierarchy")
  equipmentType           Equipment?               @relation("CategoryEquipmentType", fields: [equipmentTypeId], references: [id], onDelete: SetNull)
  services                Service[]
  products                Product[]
  targetedPromotions      Promotion[]              @relation("TargetCategory")
  categoryAccountMappings CategoryAccountMapping[]

  @@unique([name, systemId])
  @@index([systemId])
  @@index([parentId])
  @@index([equipmentTypeId])
  @@map("categories")
}

model Cabin {
  id                   String                      @id @default(cuid())
  name                 String
  code                 String?
  color                String?
  order                Int?
  isActive             Boolean                     @default(true)
  clinicId             String
  systemId             String
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  clinic               Clinic                      @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  system               System                      @relation(fields: [systemId], references: [id], onDelete: Cascade)
  equipmentAssignments EquipmentClinicAssignment[] // Equipamiento instalado en esta cabina

  @@unique([name, clinicId])
  @@unique([code, clinicId])
  @@index([clinicId])
  @@index([systemId])
  @@map("cabins")
}

model CabinScheduleOverride {
  id                String    @id @default(cuid())
  clinicId          String
  cabinIds          String[]
  startDate         DateTime  @map("start_date")
  endDate           DateTime? @map("end_date")
  startTime         String    @map("start_time")
  endTime           String    @map("end_time")
  description       String?
  isRecurring       Boolean   @default(false) @map("is_recurring")
  daysOfWeek        Int[]     @map("days_of_week")
  recurrenceEndDate DateTime? @map("recurrence_end_date")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  clinic            Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@index([clinicId, startDate, endDate])
  @@map("cabin_schedule_overrides")
}

model TariffServicePrice {
  tariffId  String
  serviceId String
  price     Float
  vatTypeId String?
  isActive  Boolean  @default(true)
  tariff    Tariff   @relation(fields: [tariffId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  vatType   VATType? @relation(fields: [vatTypeId], references: [id], onDelete: SetNull)

  @@id([tariffId, serviceId])
  @@index([serviceId])
  @@index([vatTypeId])
  @@map("tariff_service_prices")
}

model TariffProductPrice {
  tariffId  String
  productId String
  price     Float
  vatTypeId String?
  isActive  Boolean  @default(true)
  tariff    Tariff   @relation(fields: [tariffId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  vatType   VATType? @relation(fields: [vatTypeId], references: [id], onDelete: SetNull)

  @@id([tariffId, productId])
  @@index([productId])
  @@index([vatTypeId])
  @@map("tariff_product_prices")
}

model TariffBonoPrice {
  tariffId         String
  bonoDefinitionId String
  price            Float
  vatTypeId        String?
  isActive         Boolean        @default(true)
  tariff           Tariff         @relation(fields: [tariffId], references: [id], onDelete: Cascade)
  bonoDefinition   BonoDefinition @relation(fields: [bonoDefinitionId], references: [id], onDelete: Cascade)
  vatType          VATType?       @relation(fields: [vatTypeId], references: [id], onDelete: SetNull)

  @@id([tariffId, bonoDefinitionId])
  @@index([bonoDefinitionId])
  @@index([vatTypeId])
  @@map("tariff_bono_prices")
}

model TariffPackagePrice {
  tariffId            String
  packageDefinitionId String
  price               Float
  vatTypeId           String?
  isActive            Boolean           @default(true)
  tariff              Tariff            @relation(fields: [tariffId], references: [id], onDelete: Cascade)
  packageDefinition   PackageDefinition @relation(fields: [packageDefinitionId], references: [id], onDelete: Cascade)
  vatType             VATType?          @relation(fields: [vatTypeId], references: [id], onDelete: SetNull)

  @@id([tariffId, packageDefinitionId])
  @@index([packageDefinitionId])
  @@index([vatTypeId])
  @@map("tariff_package_prices")
}

model PromotionClinicScope {
  promotionId String
  clinicId    String
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  clinic      Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@id([promotionId, clinicId])
  @@index([promotionId])
  @@index([clinicId])
  @@map("promotion_clinic_scopes")
}

model PromotionCompatibility {
  compatiblePromotionId String
  promotionId           String
  systemId              String
  system                System    @relation(fields: [systemId], references: [id], onDelete: Cascade)
  promotion             Promotion @relation("DefinedCompatibility", fields: [promotionId], references: [id], onDelete: Cascade)
  compatiblePromotion   Promotion @relation("CompatibleWith", fields: [compatiblePromotionId], references: [id], onDelete: Cascade)

  @@id([promotionId, compatiblePromotionId])
  @@index([compatiblePromotionId])
  @@index([systemId])
  @@map("promotion_compatibilities")
}

model ClinicPaymentSetting {
  id                            String                  @id @default(cuid())
  isActiveInClinic              Boolean                 @default(true)
  receivingBankAccountId        String?
  posTerminalId                 String?
  isDefaultPosTerminal          Boolean?                @default(false)
  isDefaultReceivingBankAccount Boolean?                @default(false)
  systemId                      String
  clinicId                      String
  paymentMethodDefinitionId     String
  system                        System                  @relation(fields: [systemId], references: [id], onDelete: Cascade)
  clinic                        Clinic                  @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  paymentMethodDefinition       PaymentMethodDefinition @relation(fields: [paymentMethodDefinitionId], references: [id], onDelete: Cascade)
  receivingBankAccount          BankAccount?            @relation("BankAccountSettings", fields: [receivingBankAccountId], references: [id])
  posTerminal                   PosTerminal?            @relation("PosTerminalSettings", fields: [posTerminalId], references: [id])

  @@unique([systemId, clinicId, paymentMethodDefinitionId])
  @@index([receivingBankAccountId])
  @@index([posTerminalId])
  @@map("clinic_payment_settings")
}

model DebtLedger {
  id                     String           @id @default(cuid())
  ticketId               String
  invoiceId              String?
  clinicId               String
  originalAmount         Float
  paidAmount             Float            @default(0)
  pendingAmount          Float
  status                 DebtStatus       @default(PENDING)
  dueDate                DateTime?
  notes                  String?
  systemId               String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  cashSessionId          String?
  legalEntityId          String?
  personId               String
  ticket                 Ticket           @relation("TicketDebts", fields: [ticketId], references: [id], onDelete: Restrict)
  invoice                Invoice?         @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  person                 Person           @relation(fields: [personId], references: [id])
  clinic                 Clinic           @relation(fields: [clinicId], references: [id], onDelete: Restrict)
  system                 System           @relation(fields: [systemId], references: [id], onDelete: Cascade)
  payments               Payment[]        @relation("DebtPayments")
  originatingCashSession CashSession?     @relation("DebtsOriginatingInSession", fields: [cashSessionId], references: [id], onDelete: SetNull)
  debtAdjustments        DebtAdjustment[]
  LegalEntity            LegalEntity?     @relation(fields: [legalEntityId], references: [id])

  @@index([ticketId])
  @@index([invoiceId])
  @@index([personId])
  @@index([clinicId])
  @@index([systemId])
  @@index([status])
  @@index([cashSessionId])
  @@map("debt_ledgers")
}

model FiscalYear {
  id             String           @id @default(cuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  status         FiscalYearStatus @default(OPEN)
  legalEntityId  String
  systemId       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  legalEntity    LegalEntity      @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  system         System           @relation(fields: [systemId], references: [id], onDelete: Cascade)
  documentSeries DocumentSeries[]

  @@unique([legalEntityId, name])
  @@index([legalEntityId])
  @@index([systemId])
  @@map("fiscal_years")
}

model ChartOfAccountEntry {
  id                           String                        @id @default(cuid())
  accountNumber                String
  name                         String
  type                         AccountType
  description                  String?
  isSubAccount                 Boolean                       @default(false)
  parentAccountId              String?
  isMonetary                   Boolean                       @default(true)
  allowsDirectEntry            Boolean                       @default(true)
  isActive                     Boolean                       @default(true)
  legalEntityId                String
  systemId                     String
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  level                        Int                           @default(0)
  defaultForProducts           Boolean                       @default(false)
  defaultForServices           Boolean                       @default(false)
  ifrsCode                     String?
  localCode                    String?
  names                        Json?
  productCategories            String[]
  serviceCategories            String[]
  vatCategory                  String?
  parentAccount                ChartOfAccountEntry?          @relation("SubAccounts", fields: [parentAccountId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  subAccounts                  ChartOfAccountEntry[]         @relation("SubAccounts")
  legalEntity                  LegalEntity                   @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  system                       System                        @relation(fields: [systemId], references: [id], onDelete: Cascade)
  banks                        Bank[]                        @relation("BankAccounts")
  bankAccounts                 BankAccount[]                 @relation("BankAccountAccounts")
  journalEntryLines            JournalEntryLine[]
  serviceAccountMappings       ServiceAccountMapping[]
  productAccountMappings       ProductAccountMapping[]
  categoryAccountMappings      CategoryAccountMapping[]
  paymentMethodAccountMappings PaymentMethodAccountMapping[]
  vatTypeAccountMappings       VATTypeAccountMapping[]
  expenseTypeAccountMappings   ExpenseTypeAccountMapping[]
  cashSessionAccountMappings   CashSessionAccountMapping[]
  discountTypeAccountMappings  DiscountTypeAccountMapping[]
  expenseTypes                 ExpenseType[]
  vatInputAccountMappings      VATTypeAccountMapping[]       @relation("VATInputAccount")
  vatOutputAccountMappings     VATTypeAccountMapping[]       @relation("VATOutputAccount")
  promotionAccountMappings     PromotionAccountMapping[]

  @@unique([legalEntityId, systemId, accountNumber])
  @@index([legalEntityId])
  @@index([systemId])
  @@index([parentAccountId])
  @@index([ifrsCode])
  @@index([localCode])
  @@map("chart_of_account_entries")
}

model ChartOfAccountTemplate {
  id               String                          @id @default(cuid())
  code             String
  names            Json
  description      Json?
  level            Int
  countryIso       String?
  version          String
  isActive         Boolean                         @default(true)
  isSystem         Boolean                         @default(false)
  baseTemplateCode String?
  systemId         String
  createdAt        DateTime                        @default(now())
  updatedAt        DateTime                        @updatedAt
  system           System                          @relation(fields: [systemId], references: [id])
  entries          ChartOfAccountTemplateEntry[]
  versions         ChartOfAccountTemplateVersion[]

  @@unique([code, systemId])
  @@index([level, countryIso])
  @@map("chart_of_account_templates")
}

model ChartOfAccountTemplateEntry {
  id                 String                 @id @default(cuid())
  templateId         String
  accountNumber      String
  names              Json
  type               AccountType
  description        Json?
  isMonetary         Boolean                @default(true)
  allowsDirectEntry  Boolean                @default(true)
  level              Int                    @default(0)
  parentNumber       String?
  ifrsCode           String?
  localCode          String?
  vatCategory        String?
  defaultForServices Boolean                @default(false)
  defaultForProducts Boolean                @default(false)
  serviceCategories  String[]
  productCategories  String[]
  template           ChartOfAccountTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, accountNumber])
  @@index([templateId])
  @@map("chart_of_account_template_entries")
}

model ChartOfAccountTemplateVersion {
  id         String                 @id @default(cuid())
  templateId String
  version    String
  changes    Json
  createdBy  String
  createdAt  DateTime               @default(now())
  template   ChartOfAccountTemplate @relation(fields: [templateId], references: [id])
  user       User                   @relation(fields: [createdBy], references: [id])

  @@map("chart_of_account_template_versions")
}

model JournalEntry {
  id            String             @id @default(cuid())
  entryNumber   String
  date          DateTime
  description   String
  reference     String?
  ticketId      String?
  invoiceId     String?
  cashSessionId String?
  paymentId     String?
  legalEntityId String
  systemId      String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  createdBy     String?
  expenseId     String?
  ticket        Ticket?            @relation(fields: [ticketId], references: [id])
  invoice       Invoice?           @relation(fields: [invoiceId], references: [id])
  cashSession   CashSession?       @relation(fields: [cashSessionId], references: [id])
  payment       Payment?           @relation(fields: [paymentId], references: [id])
  expense       Expense?           @relation(fields: [expenseId], references: [id])
  lines         JournalEntryLine[]
  legalEntity   LegalEntity        @relation(fields: [legalEntityId], references: [id])
  system        System             @relation(fields: [systemId], references: [id])
  user          User?              @relation(fields: [createdBy], references: [id])

  @@unique([entryNumber, legalEntityId])
  @@index([date])
  @@index([ticketId])
  @@index([invoiceId])
  @@index([expenseId])
}

model JournalEntryLine {
  id             String              @id @default(cuid())
  journalEntryId String
  accountId      String
  debit          Decimal             @db.Decimal(15, 2)
  credit         Decimal             @db.Decimal(15, 2)
  description    String?
  vatAmount      Decimal?            @db.Decimal(15, 2)
  vatRate        Decimal?            @db.Decimal(5, 2)
  costCenterId   String?
  projectId      String?
  order          Int                 @default(0)
  journalEntry   JournalEntry        @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  account        ChartOfAccountEntry @relation(fields: [accountId], references: [id])

  @@index([journalEntryId])
  @@index([accountId])
  @@map("journal_entry_lines")
}

model ServiceAccountMapping {
  id                   String              @id @default(cuid())
  serviceId            String
  accountId            String
  legalEntityId        String
  systemId             String
  subaccountPattern    String?
  analyticalDimensions Json?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  clinicId             String?
  service              Service             @relation(fields: [serviceId], references: [id])
  account              ChartOfAccountEntry @relation(fields: [accountId], references: [id])
  legalEntity          LegalEntity         @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  clinic               Clinic?             @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  system               System              @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@unique([serviceId, legalEntityId, clinicId])
  @@index([clinicId])
  @@map("service_account_mappings")
}

model ProductAccountMapping {
  id                   String              @id @default(cuid())
  productId            String
  accountId            String
  legalEntityId        String
  systemId             String
  subaccountPattern    String?
  analyticalDimensions Json?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  clinicId             String?
  accountType          String?
  product              Product             @relation(fields: [productId], references: [id])
  account              ChartOfAccountEntry @relation(fields: [accountId], references: [id])
  legalEntity          LegalEntity         @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  clinic               Clinic?             @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  system               System              @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@unique([productId, legalEntityId, clinicId, accountType])
  @@index([clinicId])
  @@map("product_account_mappings")
}

model CategoryAccountMapping {
  id                   String              @id @default(cuid())
  categoryId           String
  accountId            String
  legalEntityId        String
  appliesToServices    Boolean             @default(true)
  appliesToProducts    Boolean             @default(true)
  systemId             String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  subaccountPattern    String?
  analyticalDimensions Json?
  category             Category            @relation(fields: [categoryId], references: [id])
  account              ChartOfAccountEntry @relation(fields: [accountId], references: [id])
  legalEntity          LegalEntity         @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  system               System              @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@unique([categoryId, legalEntityId])
  @@index([legalEntityId])
  @@index([systemId])
  @@map("category_account_mappings")
}

model PaymentMethodAccountMapping {
  id                        String                  @id @default(cuid())
  paymentMethodDefinitionId String
  accountId                 String
  legalEntityId             String
  systemId                  String
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  subaccountPattern         String?
  analyticalDimensions      Json?
  clinicId                  String?
  paymentMethodDefinition   PaymentMethodDefinition @relation(fields: [paymentMethodDefinitionId], references: [id])
  account                   ChartOfAccountEntry     @relation(fields: [accountId], references: [id])
  legalEntity               LegalEntity             @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  clinic                    Clinic?                 @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  system                    System                  @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@unique([paymentMethodDefinitionId, legalEntityId, clinicId])
  @@index([legalEntityId])
  @@index([systemId])
  @@index([clinicId])
  @@map("payment_method_account_mappings")
}

model VATTypeAccountMapping {
  id                    String               @id @default(cuid())
  vatTypeId             String
  inputAccountId        String?
  outputAccountId       String?
  legalEntityId         String
  systemId              String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  chartOfAccountEntryId String?
  clinicId              String?
  vatType               VATType              @relation(fields: [vatTypeId], references: [id])
  clinic                Clinic?              @relation(fields: [clinicId], references: [id])
  legalEntity           LegalEntity          @relation(fields: [legalEntityId], references: [id])
  inputAccount          ChartOfAccountEntry? @relation("VATInputAccount", fields: [inputAccountId], references: [id])
  outputAccount         ChartOfAccountEntry? @relation("VATOutputAccount", fields: [outputAccountId], references: [id])
  System                System?              @relation(fields: [systemId], references: [id])
  ChartOfAccountEntry   ChartOfAccountEntry? @relation(fields: [chartOfAccountEntryId], references: [id])

  @@unique([vatTypeId, clinicId, legalEntityId])
  @@index([clinicId])
  @@index([legalEntityId])
  @@map("vat_type_account_mappings")
}

model ExpenseTypeAccountMapping {
  id                   String              @id @default(cuid())
  expenseTypeId        String
  accountId            String
  legalEntityId        String
  systemId             String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  subaccountPattern    String?
  analyticalDimensions Json?
  clinicId             String?
  expenseType          ExpenseType         @relation(fields: [expenseTypeId], references: [id], onDelete: Cascade)
  account              ChartOfAccountEntry @relation(fields: [accountId], references: [id], onDelete: Cascade)
  legalEntity          LegalEntity         @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  system               System              @relation(fields: [systemId], references: [id], onDelete: Cascade)
  clinic               Clinic?             @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@unique([expenseTypeId, legalEntityId, clinicId])
  @@index([legalEntityId])
  @@index([systemId])
  @@index([accountId])
  @@index([clinicId])
  @@map("expense_type_account_mappings")
}

model CashSessionAccountMapping {
  id                   String              @id @default(cuid())
  clinicId             String?
  posTerminalId        String?
  accountId            String
  legalEntityId        String
  systemId             String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  subaccountPattern    String?
  analyticalDimensions Json?
  clinic               Clinic?             @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  posTerminal          PosTerminal?        @relation(fields: [posTerminalId], references: [id], onDelete: Cascade)
  account              ChartOfAccountEntry @relation(fields: [accountId], references: [id], onDelete: Cascade)
  legalEntity          LegalEntity         @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  system               System              @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@unique([clinicId, posTerminalId, legalEntityId])
  @@index([legalEntityId])
  @@index([systemId])
  @@index([accountId])
  @@index([clinicId])
  @@index([posTerminalId])
  @@map("cash_session_account_mappings")
}

model DiscountTypeAccountMapping {
  id                   String              @id @default(cuid())
  discountTypeCode     String
  discountTypeName     String
  accountId            String
  legalEntityId        String
  systemId             String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  subaccountPattern    String?
  analyticalDimensions Json?
  clinicId             String?
  discountTypeId       String?
  account              ChartOfAccountEntry @relation(fields: [accountId], references: [id])
  legalEntity          LegalEntity         @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  system               System              @relation(fields: [systemId], references: [id], onDelete: Cascade)
  clinic               Clinic?             @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@unique([discountTypeCode, legalEntityId, clinicId])
  @@index([legalEntityId])
  @@index([systemId])
  @@index([accountId])
  @@index([clinicId])
  @@map("discount_type_account_mappings")
}

model ExpenseType {
  id                    String                      @id @default(cuid())
  code                  String
  name                  String
  description           String?
  isActive              Boolean                     @default(true)
  systemId              String
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  chartOfAccountEntryId String?
  system                System                      @relation(fields: [systemId], references: [id], onDelete: Cascade)
  accountMappings       ExpenseTypeAccountMapping[]
  expenses              Expense[]
  ChartOfAccountEntry   ChartOfAccountEntry?        @relation(fields: [chartOfAccountEntryId], references: [id])

  @@unique([code, systemId])
  @@index([systemId])
  @@map("expense_types")
}

model DebtAdjustment {
  id             String             @id @default(cuid())
  debtLedgerId   String
  adjustmentType DebtAdjustmentType
  amount         Float
  reason         String
  adjustmentDate DateTime           @default(now())
  userId         String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  systemId       String
  debtLedger     DebtLedger         @relation(fields: [debtLedgerId], references: [id], onDelete: Cascade)
  user           User               @relation("UserDebtAdjustments", fields: [userId], references: [id], onDelete: Restrict)
  system         System             @relation("SystemDebtAdjustments", fields: [systemId], references: [id], onDelete: Cascade)

  @@index([debtLedgerId])
  @@index([userId])
  @@index([systemId])
  @@index([adjustmentType])
  @@map("debt_adjustments")
}

model PaymentVerification {
  id               String    @id @default(cuid())
  paymentId        String    @unique
  verified         Boolean   @default(false)
  verifiedByUserId String?
  verifiedAt       DateTime?
  attachmentUrl    String?
  payment          Payment   @relation(fields: [paymentId], references: [id])
  verifiedByUser   User?     @relation("VerifiedBy", fields: [verifiedByUserId], references: [id])

  @@index([paymentId])
  @@index([verifiedByUserId])
}

model EntityChangeLog {
  id         String     @id @default(cuid())
  entityId   String
  entityType EntityType
  action     String
  userId     String?
  timestamp  DateTime   @default(now())
  details    Json?
  systemId   String
  user       User?      @relation("UserLogs", fields: [userId], references: [id], onDelete: SetNull)
  system     System     @relation("SystemLogs", fields: [systemId], references: [id], onDelete: Cascade)

  @@index([entityId, entityType])
  @@index([timestamp])
  @@map("entity_change_logs")
}

model DocumentSeries {
  id             String           @id @default(cuid())
  organizationId String
  legalEntityId  String
  clinicId       String?
  code           String
  documentType   BaseDocumentType
  prefix         String?
  padding        Int?
  nextNumber     Int              @default(1)
  resetPolicy    ResetPolicy?
  lastResetAt    DateTime?
  fiscalYearId   String?
  isActive       Boolean          @default(true)
  organization   System           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  legalEntity    LegalEntity      @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  fiscalYear     FiscalYear?      @relation(fields: [fiscalYearId], references: [id], onDelete: SetNull)
  tickets        Ticket[]
  clinic         Clinic?          @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@unique([legalEntityId, code])
  @@index([organizationId])
  @@index([legalEntityId])
  @@index([clinicId])
  @@index([documentType])
  @@index([fiscalYearId])
  @@map("document_series")
}

model AccountMappingTemplate {
  id                String   @id @default(cuid())
  countryCode       String
  operationType     String
  baseAccount       String
  subaccountPattern String?
  description       String?
  isActive          Boolean  @default(true)
  systemId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  system            System   @relation(fields: [systemId], references: [id])

  @@unique([systemId, countryCode, operationType])
  @@index([countryCode])
  @@index([operationType])
  @@map("account_mapping_templates")
}

model AnalyticalDimension {
  id            String   @id @default(cuid())
  code          String
  name          String
  description   String?
  dataType      String
  isRequired    Boolean  @default(false)
  allowedValues Json?
  systemId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  system        System   @relation(fields: [systemId], references: [id])

  @@unique([systemId, code])
  @@map("analytical_dimensions")
}

model EntitySegmentConfig {
  id         String   @id @default(cuid())
  entityType String
  segments   Json
  systemId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  system     System   @relation(fields: [systemId], references: [id])

  @@unique([systemId, entityType])
  @@map("entity_segment_configs")
}

model Expense {
  id             String         @id @default(cuid())
  expenseNumber  String
  date           DateTime
  expenseTypeId  String
  supplierId     String?
  userId         String?
  currencyCode   String         @default("EUR")
  subtotalAmount Decimal        @db.Decimal(15, 2)
  vatAmount      Decimal        @db.Decimal(15, 2)
  totalAmount    Decimal        @db.Decimal(15, 2)
  description    String
  reference      String?
  status         ExpenseStatus  @default(PENDING)
  paymentId      String?
  vatTypeId      String?
  clinicId       String?
  systemId       String
  legalEntityId  String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  createdBy      String?
  expenseType    ExpenseType    @relation(fields: [expenseTypeId], references: [id])
  supplier       Company?       @relation("SupplierExpenses", fields: [supplierId], references: [id], onDelete: SetNull)
  user           User?          @relation("UserExpenses", fields: [userId], references: [id], onDelete: SetNull)
  payment        Payment?       @relation(fields: [paymentId], references: [id])
  vatType        VATType?       @relation(fields: [vatTypeId], references: [id])
  clinic         Clinic?        @relation(fields: [clinicId], references: [id])
  system         System         @relation(fields: [systemId], references: [id])
  legalEntity    LegalEntity    @relation(fields: [legalEntityId], references: [id])
  journalEntries JournalEntry[]
  createdByUser  User?          @relation("ExpenseCreatedBy", fields: [createdBy], references: [id])

  @@unique([expenseNumber, systemId])
  @@index([date])
  @@index([expenseTypeId])
  @@index([supplierId])
  @@index([userId])
  @@index([status])
  @@index([clinicId])
  @@index([systemId])
  @@index([legalEntityId])
  @@map("expenses")
}

model PromotionAccountMapping {
  id               String              @id @default(cuid())
  promotionId      String              @map("promotion_id")
  accountId        String              @map("account_id")
  legalEntityId    String              @map("legal_entity_id")
  clinicId         String              @map("clinic_id")
  systemId         String              @map("system_id")
  targetRevenue    Decimal?            @map("target_revenue") @db.Decimal(10, 2)
  targetNewClients Int?                @map("target_new_clients")
  budgetedDiscount Decimal?            @map("budgeted_discount") @db.Decimal(10, 2)
  actualRevenue    Decimal?            @map("actual_revenue") @db.Decimal(10, 2)
  actualNewClients Int?                @default(0) @map("actual_new_clients")
  actualDiscount   Decimal?            @map("actual_discount") @db.Decimal(10, 2)
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  promotion        Promotion           @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  account          ChartOfAccountEntry @relation(fields: [accountId], references: [id])
  legalEntity      LegalEntity         @relation(fields: [legalEntityId], references: [id], onDelete: Cascade)
  clinic           Clinic              @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  system           System              @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@unique([promotionId, clinicId], map: "uq_promotion_clinic")
  @@index([promotionId], map: "idx_promotion_account_mapping_promotion_id")
  @@index([accountId], map: "idx_promotion_account_mapping_account_id")
  @@index([legalEntityId], map: "idx_promotion_account_mapping_legal_entity_id")
  @@index([clinicId], map: "idx_promotion_account_mapping_clinic_id")
  @@index([systemId], map: "idx_promotion_account_mapping_system_id")
  @@map("promotion_account_mappings")
}

model Person {
  id               String                 @id @default(cuid())
  firstName        String
  lastName         String
  email            String?
  phone            String?
  birthDate        DateTime?
  gender           String?
  address          String?
  city             String?
  postalCode       String?
  countryIsoCode   String?
  nationalId       String?
  notes            String?
  systemId         String
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  nationalIdType   String?
  passportCountry  String?
  passportNumber   String?
  stateProvince    String?
  taxId            String?
  system           System                 @relation(fields: [systemId], references: [id], onDelete: Cascade)
  functionalRoles  PersonFunctionalRole[]
  appointments     Appointment[]
  tickets          Ticket[]
  invoices         Invoice[]
  timeLogs         TimeLog[]
  bonoInstances    BonoInstance[]
  packageInstances PackageInstance[]
  loyaltyLedgers   LoyaltyLedger[]
  debtLedgers      DebtLedger[]
  payerPayments    Payment[]              @relation("PayerPersonPayments")

  @@index([systemId])
  @@index([email])
  @@index([phone])
  @@map("persons")
}

model PersonFunctionalRole {
  id          String             @id @default(cuid())
  personId    String
  isActive    Boolean            @default(true)
  startDate   DateTime           @default(now())
  endDate     DateTime?
  systemId    String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  roleType    String
  person      Person             @relation(fields: [personId], references: [id], onDelete: Cascade)
  system      System             @relation(fields: [systemId], references: [id], onDelete: Cascade)
  leadData    PersonLeadData?
  contactData PersonContactData?
  clientData  PersonClientData?

  @@unique([personId, roleType])
  @@index([personId])
  @@index([systemId])
  @@map("person_functional_roles")
}

model PersonLeadData {
  id               String               @id @default(cuid())
  functionalRoleId String               @unique
  source           String?
  assignedToUserId String?
  companyId        String?
  companyName      String?
  conversionDate   DateTime?
  conversionToRole String?
  estimatedValue   Float?
  interests        String?
  lastContactDate  DateTime?
  nextFollowUpDate DateTime?
  priority         String?
  status           String               @default("NEW")
  functionalRole   PersonFunctionalRole @relation(fields: [functionalRoleId], references: [id], onDelete: Cascade)
  assignedToUser   User?                @relation(fields: [assignedToUserId], references: [id], onDelete: SetNull)
  company          Company?             @relation(fields: [companyId], references: [id], onDelete: SetNull)
  opportunities    Opportunity[]

  @@index([functionalRoleId])
  @@index([assignedToUserId])
  @@index([companyId])
  @@map("person_lead_data")
}

model PersonContactData {
  id                     String               @id @default(cuid())
  functionalRoleId       String               @unique
  position               String?
  companyId              String
  isPrimary              Boolean              @default(false)
  department             String?
  preferredContactMethod String?
  functionalRole         PersonFunctionalRole @relation(fields: [functionalRoleId], references: [id], onDelete: Cascade)
  company                Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([functionalRoleId])
  @@index([companyId])
  @@map("person_contact_data")
}

model Opportunity {
  id                 String         @id @default(cuid())
  description        String?
  probability        Float?
  actualCloseDate    DateTime?
  systemId           String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  clinicId           String
  estimatedCloseDate DateTime?
  estimatedValue     Float?
  leadDataId         String
  name               String
  notes              String?
  wonLostReason      String?
  stage              String         @default("PROSPECTING")
  leadData           PersonLeadData @relation(fields: [leadDataId], references: [id], onDelete: Restrict)
  clinic             Clinic         @relation(fields: [clinicId], references: [id], onDelete: Restrict)
  system             System         @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@index([leadDataId])
  @@index([clinicId])
  @@index([systemId])
  @@map("opportunities")
}

model PersonClientData {
  id                           String               @id @default(cuid())
  functionalRoleId             String               @unique
  address                      String?
  city                         String?
  postalCode                   String?
  countryIsoCode               String?
  phoneCountryIsoCode          String?
  secondaryPhone               String?
  secondaryPhoneCountryIsoCode String?
  fiscalName                   String?
  marketingConsent             Boolean              @default(false)
  dataProcessingConsent        Boolean              @default(false)
  isActive                     Boolean              @default(true)
  companyId                    String?
  originClinicId               String?
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  functionalRole               PersonFunctionalRole @relation(fields: [functionalRoleId], references: [id], onDelete: Cascade)
  company                      Company?             @relation("PersonClientCompany", fields: [companyId], references: [id])
  originClinic                 Clinic?              @relation("PersonClientOriginClinic", fields: [originClinicId], references: [id], onDelete: SetNull)

  @@index([functionalRoleId])
  @@index([companyId])
  @@index([originClinicId])
  @@map("person_client_data")
}

// === WEBHOOKS MODELS ===
model Webhook {
  id        String   @id @default(cuid())
  systemId  String
  name      String
  description String?  @db.Text
  slug      String
  direction String   @default("incoming") // incoming, outgoing, bidirectional
  url       String   @db.Text
  isActive  Boolean  @default(true)

  // Auth & Security
  allowedMethods Json?     // ["GET", "POST"]
  token          String?   @unique
  secretKey      String?
  requiresAuth   Boolean   @default(false)
  ipWhitelist    String[]
  rateLimitPerMinute Int   @default(120)

  // Configuración Outgoing
  triggerEvents  Json?      // ["appointment.created", "client.updated"]
  targetUrl      String?    @db.Text

  // Configuración Incoming
  customHeaders     Json?
  expectedSchema    Json?
  samplePayload     Json?
  dataMapping       Json?
  responseConfig    Json?
  isSystemWebhook   Boolean  @default(false)
  integrationId     String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdByUserId   String?

  // Relations
  system            System   @relation(fields: [systemId], references: [id], onDelete: Cascade)
  createdBy      User?    @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  logs           WebhookLog[]

  @@unique([systemId, slug])
}

model WebhookLog {
  id              String          @id @default(cuid())
  webhookId       String
  systemId        String
  method          String
  url             String
  headers         Json
  body            Json?
  sourceIp        String?
  statusCode      Int?
  responseBody    Json?
  isSuccess       Boolean         @default(false)
  wasProcessed    Boolean         @default(false)
  processingError String?       @db.Text
  retries         Int             @default(0)
  createdAt       DateTime        @default(now())
  processedAt     DateTime?
  webhook         Webhook         @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  system          System          @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([createdAt])
  @@index([isSuccess])
  @@index([wasProcessed])
  @@index([systemId])
  @@map("webhook_logs")
}

enum WebhookDirection {
  INCOMING     // Recibe datos
  OUTGOING     // Envía datos
  BIDIRECTIONAL // Ambos
}

enum ExecutionStatus {
  PENDING
  SUCCESS
  FAILED
  SKIPPED
}

enum AppointmentServiceStatus {
  SCHEDULED
  IN_PROGRESS
  VALIDATED
  CANCELLED
  NO_SHOW
}

enum BaseDocumentType {
  TICKET
  INVOICE
  CREDIT_NOTE
  DELIVERY_NOTE
  PURCHASE_ORDER
  SALES_ORDER
  QUOTE
  PROFORMA_INVOICE
}

enum ResetPolicy {
  YEARLY
  MONTHLY
  NEVER
  FISCAL_YEAR
}

enum FiscalYearStatus {
  OPEN
  CLOSING_PROCESS
  CLOSED
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
  COST_OF_GOODS_SOLD
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum PaymentMethodType {
  CASH
  CARD
  BANK_TRANSFER
  ONLINE_GATEWAY
  CHECK
  INTERNAL_CREDIT
  OTHER
  DEFERRED_PAYMENT
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  ERROR
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  LOCKED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ExceptionType {
  HOLIDAY
  VACATION
  LEAVE
  SPECIAL_CLOSURE
  SPECIAL_OPENING
  OTHER
}

enum ExceptionScope {
  USER
  CLINIC
  SYSTEM
}

enum StockMovementType {
  INITIAL
  PURCHASE
  SALE
  CONSUMPTION
  ADJUSTMENT
  TRANSFER_IN
  TRANSFER_OUT
  RETURN_SUPPLIER
  RETURN_CLIENT
}

enum TicketType {
  SALE
  RETURN
}

enum TicketStatus {
  OPEN
  CLOSED
  ACCOUNTED
  VOID
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum TicketItemType {
  SERVICE
  PRODUCT
  BONO_DEFINITION
  PACKAGE_DEFINITION
  DEBT_LIQUIDATION
  ADJUSTMENT
}

enum InvoiceType {
  SALE
  PURCHASE
}

enum InvoiceStatus {
  DRAFT
  SENT
  PENDING
  PAID
  PARTIALLY_PAID
  OVERDUE
  VOID
}

enum PaymentType {
  DEBIT
  CREDIT
}

enum CashSessionStatus {
  OPEN
  CLOSED
  RECONCILED
}

enum PromotionAccumulationMode {
  EXCLUSIVE
  ALL
  SPECIFIC
}

enum PromotionType {
  PERCENTAGE_DISCOUNT
  FIXED_AMOUNT_DISCOUNT
  BUY_X_GET_Y_SERVICE
  BUY_X_GET_Y_PRODUCT
  POINTS_MULTIPLIER
  FREE_SHIPPING
}

enum PromotionTargetScope {
  SPECIFIC_SERVICE
  SPECIFIC_PRODUCT
  SPECIFIC_BONO
  SPECIFIC_PACKAGE
  CATEGORY
  TARIFF
}

enum LoyaltyMovementType {
  AWARDED_PURCHASE
  REDEEMED_PAYMENT
  MANUAL_ADJUSTMENT
  EXPIRATION
  PROMOTION_AWARD
  INITIAL_BALANCE
}

enum EntityType {
  SYSTEM
  USER
  CLIENT
  COMPANY
  CONTACT_PERSON
  LEAD
  CLINIC
  EQUIPMENT
  DEVICE
  SERVICE
  PRODUCT
  APPOINTMENT
  TICKET
  PAYMENT
  EMPLOYMENT_CONTRACT
  INVOICE
  BANK
  BANK_ACCOUNT
  PROMOTION
  BONO_DEFINITION
  PACKAGE_DEFINITION
  CASH_SESSION
  DEBT_LEDGER
  DEBT_ADJUSTMENT
  FISCAL_YEAR
  EXPENSE
  PERSON
  TARIFA
}

enum DebtStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  CANCELLED
}

enum DebtAdjustmentType {
  CANCELLATION
  ADMINISTRATIVE_CORRECTION
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
  HEAD
  OPTIONS
  TRACE
  CONNECT
}

enum IntegrationCategory {
  AUTOMATION
  MARKETING
  COMMUNICATION
  PAYMENTS
  ACCOUNTING
  IOT_DEVICES
}

enum InstallationType {
  INITIAL_INSTALLATION
  REPLACEMENT
}

enum ReplacementReason {
  NORMAL_WEAR
  PREMATURE_FAILURE
  PREVENTIVE_MAINTENANCE
  UPGRADE
  DEFECTIVE
}

model IntegrationModule {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  logoUrl     String?
  category    IntegrationCategory
  isPaid      Boolean  @default(false)
  integrations SystemIntegration[]
}

model SystemIntegration {
  id         String            @id @default(cuid())
  systemId   String
  system     System            @relation(fields: [systemId], references: [id])
  moduleId   String
  module     IntegrationModule @relation(fields: [moduleId], references: [id])
  isActive   Boolean           @default(false)
  settings   Json?
  smartDevices SmartPlugDevice[]
  @@unique([systemId, moduleId])
}

model SmartPlugDevice {
  id                           String   @id @default(cuid())
  name                         String
  type                         String   // "SHELLY", "KASA", etc.
  deviceId                     String   // ID del fabricante
  cloudId                      String?  // 🆔 NUEVO: ID para comandos WebSocket (ej: b0b21c12dd94)
  deviceIp                     String?  // IP actual del dispositivo
  equipmentClinicAssignmentId  String?  @unique // Nueva relación con asignación específica
  equipmentClinicAssignment    EquipmentClinicAssignment? @relation(fields: [equipmentClinicAssignmentId], references: [id])
  integrationId                String
  integration                  SystemIntegration @relation(fields: [integrationId], references: [id])
  systemId                     String
  system                       System   @relation(fields: [systemId], references: [id])
  clinicId                     String?  // Opcional
  clinic                       Clinic?  @relation(fields: [clinicId], references: [id])
  
  // Campos Shelly básicos
  credentialId  String?
  credential    ShellyCredential? @relation(fields: [credentialId], references: [id], onDelete: SetNull)
  online        Boolean   @default(false)
  lastSeenAt    DateTime?
  
  // Información del dispositivo
  generation    String?   // "G1", "G2", "GBLE"
  modelCode     String?   // "SHSW-1", "S3PL-00112EU", etc.
  macAddress    String?   // MAC del dispositivo
  firmwareVersion String? // Versión actual del firmware
  hasUpdate     Boolean?  // Si hay actualizaciones disponibles
  
  // Estado del switch/relay principal
  relayOn       Boolean?  // null si no se conoce el estado
  relaySource   String?   // "button", "SHC", "timer", etc.
  
  // Datos energéticos
  currentPower  Float?    // Potencia actual en watts
  totalEnergy   Float?    // Energía total consumida en Wh
  voltage       Float?    // Voltaje actual
  current       Float?    // Corriente actual en amperios
  
  // Conectividad WiFi
  wifiSsid      String?   // Red WiFi conectada
  wifiRssi      Int?      // Señal WiFi (-dBm)
  
  // Temperatura del dispositivo
  temperature   Float?    // Temperatura en Celsius
  
  // Configuraciones adicionales del modal
  // Pestaña Básico
  timezone      String?   // Zona horaria del dispositivo
  autoUpdate    Boolean   @default(true) // Actualizaciones automáticas
  
  // Pestaña Red
  wifiBackupEnabled Boolean @default(false) // Si WiFi backup está habilitado
  wifiBackupSsid    String? // SSID de respaldo
  apModeEnabled     Boolean @default(false) // Modo Access Point
  
  // Pestaña Protección  
  autoOffEnabled    Boolean @default(false) // Auto-apagado habilitado
  autoOffDelay      Int?    // Segundos para auto-apagado
  powerLimit        Float?  // Límite de potencia en watts
  
  // Pestaña LED (solo Gen3)
  ledBrightness     Int?    // 0-100
  ledColorMode      String? // "color" o "white"
  ledColorR         Int?    // 0-255
  ledColorG         Int?    // 0-255
  ledColorB         Int?    // 0-255
  ledNightMode      Boolean @default(false)
  
  // Control de encendido y apagado automático
  appointmentOnlyMode Boolean @default(true)  // Control de encendido solo desde citas
  autoShutdownEnabled Boolean @default(true)  // Control de apagado automático
  
  // Metadatos adicionales
  rawData       Json?     // Datos completos del dispositivo para debugging
  excludeFromSync Boolean @default(false) // Si true, no se sincroniza en futuras sync
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @default(now())
  
  @@index([credentialId])
  @@index([systemId])
  @@index([clinicId])
  @@index([equipmentClinicAssignmentId])
  @@index([online])
  @@index([modelCode])
}

model ShellyCredential {
  id             String            @id @default(cuid())
  name           String            // Alias visible para el usuario
  email          String
  accessToken    String            @db.Text // Cifrado
  refreshToken   String            @db.Text // Cifrado
  apiHost        String            // ej: https://shelly-47-eu.shelly.cloud
  systemId       String
  clinicId       String?           // Opcional - usuario puede no estar asignado a clínica
  status         String            @default("connected") // connected | error | expired
  lastSyncAt     DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  // Relations
  system         System            @relation(fields: [systemId], references: [id], onDelete: Cascade)
  clinic         Clinic?           @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  smartPlugs     SmartPlugDevice[]
  
  @@unique([email, systemId])  // Cambiar unique constraint para permitir null en clinicId
  @@index([systemId])
  @@index([clinicId])
  @@index([status])
  @@map("shelly_credentials")
}

model WebSocketConnection {
  id            String   @id @default(cuid())
  type          String   // "SHELLY", "OTHER_IOT", "SOCKET_IO"
  referenceId   String   // credentialId para Shelly, systemId para Socket.io
  systemId      String   // 🆔 NUEVO: Campo requerido para multi-tenancy
  status        String   // "connected", "disconnected", "error", "reconnecting"
  lastPingAt    DateTime?
  errorMessage  String?
  metadata      Json?
  autoReconnect Boolean  @default(true) // Control de reconexión automática
  loggingEnabled Boolean @default(true) // 🔧 NUEVO: Control de logging de eventos
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  system        System   @relation(fields: [systemId], references: [id], onDelete: Cascade)
  logs          WebSocketLog[]
  
  @@unique([type, referenceId, systemId], name: "unique_websocket_per_reference_system")
  @@index([type, referenceId])
  @@index([systemId])
  @@index([status])
}

model WebSocketLog {
  id               String              @id @default(cuid())
  connectionId     String
  connection       WebSocketConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  systemId         String              // 🆔 NUEVO: Campo requerido para multi-tenancy
  
  // Información del evento
  eventType        String              // "connect", "disconnect", "error", "message", "ping"
  message          String?             @db.Text
  errorDetails     String?             @db.Text
  metadata         Json?               // Datos adicionales del evento
  
  // Métricas de rendimiento
  responseTime     Int?                // Tiempo de respuesta en ms
  dataSize         Int?                // Tamaño de datos en bytes
  
  // Información del cliente
  clientIp         String?
  userAgent        String?
  
  // Timestamps
  createdAt        DateTime            @default(now())
  
  // Relaciones
  system           System              @relation(fields: [systemId], references: [id], onDelete: Cascade)
  
  @@index([connectionId])
  @@index([systemId])
  @@index([eventType])
  @@index([createdAt])
  @@map("websocket_logs")
}

enum CategoryType {
  SERVICE
  PRODUCT
  MIXED
}

enum DeviceUsageStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

// Enums nuevos
enum UsageEndedReason {
  MANUAL
  AUTO_SHUTDOWN
  APPOINTMENT_CLOSED
  POWER_OFF_REANUDABLE
}

enum UsageOutcome {
  EARLY
  ON_TIME
  EXTENDED
}

// ========= ENERGY INSIGHTS =========================

enum UsageInsightType {
  OVER_CONSUMPTION
  UNDER_CONSUMPTION
  POWER_ANOMALY
  OVER_DURATION
  UNDER_DURATION
}

model ServiceEnergyProfile {
  id              String   @id @default(cuid())
  systemId        String
  equipmentId     String
  serviceId       String
  avgKwhPerMin    Float
  stdDevKwhPerMin Float
  sampleCount     Int
  /// ⏱ Duración real en minutos
  avgMinutes      Float     @default(0)
  stdDevMinutes   Float     @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  /// Tabla física: smart_plug_service_energy_profiles
  @@map("smart_plug_service_energy_profiles")

  @@index([systemId])
  @@index([equipmentId])
  @@unique([systemId, equipmentId, serviceId])
}

model DeviceUsageInsight {
  id                          String   @id @default(cuid())
  systemId                    String
  appointmentId               String
  deviceUsageId               String?
  equipmentClinicAssignmentId String?
  clientId                    String?
  detectedAt                  DateTime @default(now())
  insightType                 UsageInsightType
  actualKwh                   Float
  expectedKwh                 Float
  deviationPct                Float
  detailJson                  Json?
  resolved                    Boolean  @default(false)
  resolvedByUserId            String?
  resolvedAt                  DateTime?

  /// Tabla física: smart_plug_device_usage_insights
  @@map("smart_plug_device_usage_insights")

  @@index([systemId])
  @@index([appointmentId])
  @@index([insightType])
}

// ========= ENERGY INSIGHTS: RAW SAMPLES & SERVICE USAGE ================

model SmartPlugPowerSample {
  /// 🔌 RAW POWER SAMPLE – Lectura cruda recibida cada ~8 s.
  /// Tabla física: smart_plug_power_samples
  id           String   @id @default(cuid())
  systemId     String
  clinicId     String
  clientId     String?
  userId       String?
  deviceId     String
  usageId      String
  timestamp    DateTime @db.Timestamptz(6)
  watts        Float
  totalEnergy  Float    // kWh acumulado reportado por el Shelly
  relayOn      Boolean
  servicesInfo Json?    // JSONB con ids de servicio y estMinutes [{id, estMin}]
  createdAt    DateTime @default(now())

  @@index([deviceId, timestamp])
  @@index([usageId])
  @@index([systemId])
  @@map("smart_plug_power_samples")
}

model AppointmentServiceEnergyUsage {
  /// 📊 DESAGREGACIÓN POR SERVICIO – Reparto proporcional al cerrar el uso.
  /// Tabla física: appointment_service_energy_usage
  id               String   @id @default(cuid())
  systemId         String
  clinicId         String
  clientId         String?
  userId           String?
  usageId          String
  serviceId        String
  equipmentId      String?
  estimatedMinutes Float
  realMinutes      Float
  allocatedKwh     Float
  createdAt        DateTime @default(now())

  @@unique([usageId, serviceId])
  @@index([serviceId, createdAt])
  @@index([clinicId, serviceId, equipmentId, createdAt])
  @@map("appointment_service_energy_usage")
}

model ServiceGroupEnergyProfile {
  /// Perfil por combinación de servicios (hash) + hourBucket
  id            String   @id @default(cuid())
  systemId      String
  clinicId      String
  equipmentId   String
  servicesHash  String   // md5 de ids ordenados
  services      Json?
  hourBucket    Int
  meanKwh       Float
  stdDevKwh     Float
  meanMinutes   Float
  stdDevMinutes Float
  samples       Int       @default(1)
  m2            Float     @default(0) // para Welford opcional
  updatedAt     DateTime  @updatedAt

  @@unique([clinicId, equipmentId, servicesHash, hourBucket])
  @@index([systemId])
  @@map("smart_plug_service_group_energy_profile")
}

model ClientServiceEnergyProfile {
  id            String   @id @default(cuid())
  systemId      String
  clinicId      String
  clientId      String
  serviceId     String
  hourBucket    Int
  meanKwh       Float
  stdDevKwh     Float
  meanMinutes   Float
  stdDevMinutes Float
  samples       Int       @default(1)
  m2            Float     @default(0)
  updatedAt     DateTime  @updatedAt

  @@unique([clinicId, clientId, serviceId, hourBucket])
  @@index([systemId])
  @@map("smart_plug_client_service_energy_profile")
}

model UserServiceEnergyProfile {
  id            String   @id @default(cuid())
  systemId      String
  clinicId      String
  userId        String
  serviceId     String
  hourBucket    Int
  meanKwh       Float
  stdDevKwh     Float
  meanMinutes   Float
  stdDevMinutes Float
  samples       Int       @default(1)
  m2            Float     @default(0)
  updatedAt     DateTime  @updatedAt

  @@unique([clinicId, userId, serviceId, hourBucket])
  @@index([systemId])
  @@map("smart_plug_user_service_energy_profile")
}
