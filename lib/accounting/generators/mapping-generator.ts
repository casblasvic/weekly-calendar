/**
 * Generador de mapeos automáticos entre cuentas contables y entidades del sistema
 */

import { BusinessFeatures, AccountingMapping, ServiceCategory, ProductFamily, PaymentMethodTemplate } from './types';

export interface MappingConfiguration {
  categories: ServiceCategory[];
  productFamilies: ProductFamily[];
  paymentMethods: PaymentMethodTemplate[];
  businessFeatures: BusinessFeatures;
  countryCode: string;
}

/**
 * Genera mapeos automáticos basados en la naturaleza de las categorías y métodos de pago
 */
export function generateAccountingMappings(config: MappingConfiguration): AccountingMapping {
  const mappings: AccountingMapping = {
    categories: {},
    paymentMethods: {},
    vatRates: {},
    specialRules: []
  };

  // Mapeo de categorías de servicios
  config.categories.forEach(category => {
    const accountCode = getCategoryAccountCode(category, config.countryCode);
    if (accountCode) {
      mappings.categories[category.code] = {
        accountCode,
        description: category.name,
        autoGenerated: true
      };
    }
  });

  // Mapeo de familias de productos
  config.productFamilies.forEach(family => {
    const accountCode = getProductFamilyAccountCode(family, config.countryCode);
    if (accountCode) {
      mappings.categories[`PF_${family.code}`] = {
        accountCode,
        description: family.name,
        autoGenerated: true
      };
    }
  });

  // Mapeo de métodos de pago
  config.paymentMethods.forEach(method => {
    const accountCode = getPaymentMethodAccountCode(method.code, config.countryCode);
    if (accountCode) {
      mappings.paymentMethods[method.code] = {
        accountCode,
        description: method.name,
        autoGenerated: true
      };
    }
  });

  // Mapeo de tipos de IVA según país
  mappings.vatRates = generateVATMappings(config.countryCode);

  // Reglas especiales según el tipo de negocio
  if (config.businessFeatures.hasMedicalTreatments) {
    mappings.specialRules.push({
      name: 'medical_vat_exemption',
      description: 'Exención de IVA para tratamientos médicos',
      condition: 'category.type === "MEDICAL_TREATMENT"',
      action: 'applyVATRate(0)'
    });
  }

  return mappings;
}

/**
 * Obtiene el código de cuenta contable para una categoría de servicio
 */
function getCategoryAccountCode(category: ServiceCategory, countryCode: string): string {
  // Mapeos estándar para España (Plan General Contable)
  if (countryCode === 'ES') {
    const mappings: Record<string, string> = {
      // Consultas médicas
      'CONS_MED': '705001',
      'CONS_EST': '705002',
      
      // Tratamientos estéticos
      'TRAT_FACIAL': '705101',
      'TRAT_CORP': '705102',
      'TRAT_LASER': '705103',
      'TRAT_INY': '705104',
      
      // Peluquería
      'SERV_CORTE': '705201',
      'SERV_COLOR': '705202',
      'SERV_PEINADO': '705203',
      
      // Spa
      'SPA_MASAJE': '705301',
      'SPA_FACIAL': '705302',
      'SPA_HIDRO': '705303',
      'SPA_RELAX': '705304'
    };
    
    return mappings[category.code] || '705000'; // Cuenta genérica de servicios
  }
  
  // Mapeos para otros países...
  return '';
}

/**
 * Obtiene el código de cuenta contable para una familia de productos
 */
function getProductFamilyAccountCode(family: ProductFamily, countryCode: string): string {
  if (countryCode === 'ES') {
    const mappings: Record<string, string> = {
      // Productos cosméticos
      'PROD_COSM': '701001',
      'PROD_CREMAS': '701002',
      'PROD_SERUM': '701003',
      
      // Productos capilares
      'PROD_CHAMP': '701101',
      'PROD_ACOND': '701102',
      'PROD_TRAT_CAP': '701103',
      
      // Suplementos
      'PROD_SUPL': '701201',
      'PROD_VITAM': '701202',
      
      // Aparatología
      'PROD_APAR_EST': '701301',
      'PROD_APAR_MED': '701302'
    };
    
    return mappings[family.code] || '701000'; // Cuenta genérica de ventas de productos
  }
  
  return '';
}

/**
 * Obtiene el código de cuenta contable para un método de pago
 */
function getPaymentMethodAccountCode(methodCode: string, countryCode: string): string {
  if (countryCode === 'ES') {
    const mappings: Record<string, string> = {
      'CASH': '570000',       // Caja
      'CARD': '572001',       // Tarjeta de crédito
      'TRANSFER': '572002',   // Transferencia bancaria
      'CHECK': '572003',      // Cheque
      'FINANCING': '524000',  // Financiación
      'VOUCHER': '438000',    // Bonos y vales
      'DIGITAL': '572004'     // Pago digital
    };
    
    return mappings[methodCode] || '572000'; // Cuenta genérica de bancos
  }
  
  return '';
}

/**
 * Genera mapeos de tipos de IVA según el país
 */
function generateVATMappings(countryCode: string): Record<string, any> {
  if (countryCode === 'ES') {
    return {
      'IVA_21': {
        rate: 21,
        accountCode: '477000',
        description: 'IVA Repercutido 21%'
      },
      'IVA_10': {
        rate: 10,
        accountCode: '477001',
        description: 'IVA Repercutido 10%'
      },
      'IVA_4': {
        rate: 4,
        accountCode: '477002',
        description: 'IVA Repercutido 4%'
      },
      'IVA_0': {
        rate: 0,
        accountCode: '477003',
        description: 'IVA Exento'
      }
    };
  }
  
  // Mapeos para otros países...
  return {};
}

/**
 * Valida y ajusta los mapeos según las cuentas existentes
 */
export function validateMappings(
  mappings: AccountingMapping,
  existingAccounts: string[]
): { valid: boolean; errors: string[] } {
  const errors: string[] = [];
  
  // Validar mapeos de categorías
  Object.entries(mappings.categories).forEach(([key, mapping]) => {
    if (!existingAccounts.includes(mapping.accountCode)) {
      errors.push(`Cuenta ${mapping.accountCode} para categoría ${key} no existe`);
    }
  });
  
  // Validar mapeos de métodos de pago
  Object.entries(mappings.paymentMethods).forEach(([key, mapping]) => {
    if (!existingAccounts.includes(mapping.accountCode)) {
      errors.push(`Cuenta ${mapping.accountCode} para método de pago ${key} no existe`);
    }
  });
  
  return {
    valid: errors.length === 0,
    errors
  };
}
